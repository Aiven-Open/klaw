/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/user/updateTeam": {
    post: operations["updateUserTeamFromSwitchTeams"];
  };
  "/uploadSchema": {
    post: operations["uploadSchema"];
  };
  "/updateUser": {
    post: operations["updateUser"];
  };
  "/updateTopics": {
    post: operations["createTopicsUpdateRequest"];
  };
  "/updateTeam": {
    post: operations["updateTeam"];
  };
  "/updateSyncTopics": {
    post: operations["updateSyncTopics"];
  };
  "/updateSyncTopicsBulk": {
    post: operations["updateSyncTopicsBulk"];
  };
  "/updateSyncConnectors": {
    post: operations["updateSyncConnectors"];
  };
  "/updateSyncBackTopics": {
    post: operations["updateSyncBackTopics"];
  };
  "/updateSyncBackAcls": {
    post: operations["updateSyncBackAcls"];
  };
  "/updateSyncAcls": {
    post: operations["updateSyncAcls"];
  };
  "/updateProfile": {
    post: operations["updateProfile"];
  };
  "/updatePermissions": {
    post: operations["updatePermissions"];
  };
  "/updateKwCustomProperty": {
    post: operations["updateKwCustomProperty"];
  };
  "/udpateTenant": {
    post: operations["udpateTenant"];
  };
  "/udpateTenantExtension": {
    post: operations["udpateTenantExtension"];
  };
  "/sendMessageToAdmin": {
    post: operations["sendMessageToAdmin"];
  };
  "/saveTopicDocumentation": {
    post: operations["saveTopicDocumentation"];
  };
  "/saveConnectorDocumentation": {
    post: operations["saveConnectorDocumentation"];
  };
  "/resetPassword": {
    post: operations["resetPassword"];
  };
  "/request/delete": {
    /** Updates the Status of a request to Deleted */
    post: operations["deleteRequest"];
  };
  "/request/decline": {
    /** Updates the Status of a request to Declined */
    post: operations["declineRequest"];
  };
  "/request/approve": {
    /** Updates the Status of a request to Approved and provisions the request */
    post: operations["approveRequest"];
  };
  "/registerUser": {
    post: operations["registerUser"];
  };
  "/registerUserSaas": {
    post: operations["registerUserSaas"];
  };
  "/promote/schema": {
    post: operations["promoteSchema"];
  };
  "/logout": {
    post: operations["logout"];
  };
  "/execTopicRequests": {
    post: operations["approveTopicRequests"];
  };
  "/execTopicRequestsDecline": {
    post: operations["declineTopicRequests"];
  };
  "/execSchemaRequests": {
    post: operations["execSchemaRequests"];
  };
  "/execSchemaRequestsDecline": {
    post: operations["execSchemaRequestsDecline"];
  };
  "/execNewUserRequestDecline": {
    post: operations["declineNewUserRequests"];
  };
  "/execNewUserRequestApprove": {
    post: operations["approveNewUserRequests"];
  };
  "/execConnectorRequests": {
    post: operations["approveTopicRequests_1"];
  };
  "/execConnectorRequestsDecline": {
    post: operations["declineConnectorRequests"];
  };
  "/execAclRequest": {
    post: operations["approveAclRequests"];
  };
  "/execAclRequestDecline": {
    post: operations["declineAclRequests"];
  };
  "/deleteUserRequest": {
    post: operations["deleteUser"];
  };
  "/deleteTopicRequests": {
    post: operations["deleteTopicRequests"];
  };
  "/deleteTenant": {
    post: operations["deleteTenant"];
  };
  "/deleteTeamRequest": {
    post: operations["deleteTeam"];
  };
  "/deleteSchemaRequests": {
    post: operations["deleteSchemaRequests"];
  };
  "/deleteRole": {
    post: operations["deleteRole"];
  };
  "/deleteEnvironmentRequest": {
    post: operations["deleteEnvironment"];
  };
  "/deleteConnectorRequests": {
    post: operations["deleteConnectorRequests"];
  };
  "/deleteCluster": {
    post: operations["deleteCluster"];
  };
  "/deleteAclRequests": {
    post: operations["deleteAclRequests"];
  };
  "/createTopics": {
    post: operations["createTopicsCreateRequest"];
  };
  "/createTopicDeleteRequest": {
    post: operations["createTopicDeleteRequest"];
  };
  "/createDeleteAclSubscriptionRequest": {
    post: operations["deleteAclSubscriptionRequest"];
  };
  "/createConnector": {
    post: operations["createConnectorRequest"];
  };
  "/createConnectorDeleteRequest": {
    post: operations["createConnectorDeleteRequest"];
  };
  "/createClaimTopicRequest": {
    post: operations["createClaimTopicRequest"];
  };
  "/createClaimConnectorRequest": {
    post: operations["createClaimConnectorRequest"];
  };
  "/createAcl": {
    post: operations["createAcl"];
  };
  "/chPwd": {
    post: operations["changePwd"];
  };
  "/addTenantId": {
    post: operations["addTenantId"];
  };
  "/addRoleId": {
    post: operations["addRoleId"];
  };
  "/addNewUser": {
    post: operations["addNewUser"];
  };
  "/addNewTeam": {
    post: operations["addNewTeam"];
  };
  "/addNewEnv": {
    post: operations["addNewEnv"];
  };
  "/addNewCluster": {
    post: operations["addNewCluster"];
  };
  "/user/{userId}/switchTeamsList": {
    get: operations["getSwitchTeams"];
  };
  "/testClusterApiConnection": {
    get: operations["testClusterApiConnection"];
  };
  "/shutdownContext": {
    get: operations["shutdownApp"];
  };
  "/showUserList": {
    get: operations["showUsers"];
  };
  "/resetMemoryCache/{tenantName}/{entityType}/{operationType}": {
    get: operations["resetMemoryCache"];
  };
  "/resetCache": {
    get: operations["resetCache"];
  };
  "/requests/statistics": {
    get: operations["getRequestStatistics"];
  };
  "/getUserInfoFromRegistrationId": {
    get: operations["getRegistrationInfoFromId"];
  };
  "/getUserDetails": {
    get: operations["getUserDetails"];
  };
  "/getUpdateEnvStatus": {
    get: operations["getUpdateEnvStatus"];
  };
  "/getTopics": {
    get: operations["getTopics"];
  };
  "/getTopicsRowView": {
    get: operations["getTopicsRowView"];
  };
  "/getTopicsOnly": {
    get: operations["getTopicsOnly"];
  };
  "/getTopicsCountPerEnv": {
    get: operations["getTopicsCountPerEnv"];
  };
  "/getTopicTeam": {
    get: operations["getTopicTeam"];
  };
  "/getTopicRequests": {
    get: operations["getTopicRequests"];
  };
  "/getTopicRequestsForApprover": {
    get: operations["getTopicRequestsForApprover"];
  };
  "/getTopicEvents": {
    get: operations["getTopicEvents"];
  };
  "/getTopicDetailsPerEnv": {
    get: operations["getTopicDetailsPerEnv"];
  };
  "/getTenants": {
    get: operations["getTenants"];
  };
  "/getTenantsInfo": {
    get: operations["getTenantsInfo"];
  };
  "/getTeamsOverview": {
    get: operations["getTeamsOverview"];
  };
  "/getTeamDetails": {
    get: operations["getTeamDetails"];
  };
  "/getSyncTopics": {
    get: operations["getSyncTopics"];
  };
  "/getSyncEnv": {
    get: operations["getSyncEnv"];
  };
  "/getSyncConnectors": {
    get: operations["getSyncTopics_1"];
  };
  "/getSyncConnectorsEnv": {
    get: operations["getSyncConnectorsEnv"];
  };
  "/getSyncBackAcls": {
    get: operations["getSyncBackAcls"];
  };
  "/getSyncAcls": {
    get: operations["getSyncAcls"];
  };
  "/getStandardEnvNames": {
    get: operations["getStandardEnvNames"];
  };
  "/getSchemaRequests": {
    get: operations["getSchemaRequests"];
  };
  "/getSchemaRequestsForApprover": {
    get: operations["getSchemaRequestsForApprover"];
  };
  "/getSchemaRegEnvs": {
    get: operations["getSchemaRegEnvs"];
  };
  "/getSchemaOfTopic": {
    get: operations["getSchemaOfTopic"];
  };
  "/getRoles": {
    get: operations["getRoles"];
  };
  "/getRolesFromDb": {
    get: operations["getRolesFromDb"];
  };
  "/getRequestTypeStatuses": {
    get: operations["getRequestTypeStatuses"];
  };
  "/getPermissions": {
    get: operations["getPermissions"];
  };
  "/getPermissionDescriptions": {
    get: operations["getPermissionDescriptions"];
  };
  "/getNewUserRequests": {
    get: operations["getNewUserRequests"];
  };
  "/getMyTenantInfo": {
    get: operations["getMyTenantInfo"];
  };
  "/getMyProfileInfo": {
    get: operations["getMyProfileInfo"];
  };
  "/getKwReport": {
    get: operations["getKwReport"];
  };
  "/getKwPubkey": {
    get: operations["getKwPubkey"];
  };
  "/getKafkaProtocols": {
    get: operations["getSupportedKafkaProtocols"];
  };
  "/getKafkaConnectEnvs": {
    get: operations["getKafkaConnectEnvs"];
  };
  "/getExtensionPeriods": {
    get: operations["getExtensionPeriods"];
  };
  "/getEnvs": {
    get: operations["getEnvs"];
  };
  "/getEnvsPaginated": {
    get: operations["getEnvsPaginated"];
  };
  "/getEnvsForSchemaRequests": {
    get: operations["getRequestForSchemas"];
  };
  "/getEnvsBaseCluster": {
    get: operations["getEnvsBaseCluster"];
  };
  "/getEnvsBaseClusterFilteredForTeam": {
    get: operations["getEnvsBaseClusterFilteredForTeam"];
  };
  "/getEnvParams": {
    get: operations["getEnvParams"];
  };
  "/getEnvDetails": {
    get: operations["getEnvDetails"];
  };
  "/getDbAuth": {
    get: operations["getDbAuth"];
  };
  "/getDashboardStats": {
    get: operations["getDashboardStats"];
  };
  "/getConsumerOffsets": {
    get: operations["getConsumerOffsets"];
  };
  "/getConnectors": {
    get: operations["getConnectors"];
  };
  "/getConnectorRequests": {
    get: operations["getConnectorRequests"];
  };
  "/getConnectorRequestsForApproval": {
    get: operations["getCreatedConnectorRequests"];
  };
  "/getConnectorOverview": {
    get: operations["getConnectorOverview"];
  };
  "/getConnectorDetails": {
    get: operations["getConnectorDetails"];
  };
  "/getConnectorDetailsPerEnv": {
    get: operations["getConnectorDetailsPerEnv"];
  };
  "/getClusters": {
    get: operations["getClusters"];
  };
  "/getClustersPaginated": {
    get: operations["getClustersPaginated"];
  };
  "/getClusterInfoFromEnv": {
    get: operations["getClusterInfoFromEnv"];
  };
  "/getClusterDetails": {
    get: operations["getClusterDetails"];
  };
  "/getBrokerTopMetrics": {
    get: operations["getBrokerTopMetrics"];
  };
  "/getBasicInfo": {
    get: operations["getBasicInfo"];
  };
  "/getAuth": {
    get: operations["getAuth"];
  };
  "/getAllTeamsSU": {
    get: operations["getAllTeamsSU"];
  };
  "/getAllTeamsSUOnly": {
    get: operations["getAllTeamsSUOnly"];
  };
  "/getAllTeamsSUFromRegisterUsers": {
    get: operations["getAllTeamsSUFromRegisterUsers"];
  };
  "/getAllServerEditableConfig": {
    get: operations["getAllEditableProps"];
  };
  "/getAllServerConfig": {
    get: operations["getAllProperties"];
  };
  "/getAivenServiceAccounts": {
    get: operations["getAivenServiceAccounts"];
  };
  "/getAivenServiceAccount": {
    get: operations["getAivenServiceAccountDetails"];
  };
  "/getAdvancedTopicConfigs": {
    get: operations["getAdvancedTopicConfigs"];
  };
  "/getActivityLogPerEnv": {
    get: operations["showActivityLog"];
  };
  "/getActivityLogForTeamOverview": {
    get: operations["getActivityLogForTeamOverview"];
  };
  "/getActivationInfo": {
    get: operations["getActivationInfo"];
  };
  "/getAcls": {
    get: operations["getAcls"];
  };
  "/getAclsCountPerEnv": {
    get: operations["getAclsCountPerEnv"];
  };
  "/getAclRequests": {
    get: operations["getAclRequests"];
  };
  "/getAclRequestsForApprover": {
    get: operations["getAclRequestsForApprover"];
  };
  "/getAclCommands": {
    get: operations["getAclCommand"];
  };
};

export type components = {
  schemas: {
    UserInfoModel: {
      username: string;
      userPassword?: string;
      team?: string;
      /** Format: int32 */
      teamId?: number;
      role?: string;
      fullname: string;
      mailid?: string;
      switchTeams?: boolean;
      switchAllowedTeamIds?: number[];
      switchAllowedTeamNames?: string[];
      tenantName?: string;
      /** Format: int32 */
      tenantId?: number;
      totalNoPages?: string;
      allPageNos?: string[];
    };
    ApiResponse: {
      /** @enum {string} */
      status?:
        | "100 CONTINUE"
        | "101 SWITCHING_PROTOCOLS"
        | "102 PROCESSING"
        | "103 EARLY_HINTS"
        | "103 CHECKPOINT"
        | "200 OK"
        | "201 CREATED"
        | "202 ACCEPTED"
        | "203 NON_AUTHORITATIVE_INFORMATION"
        | "204 NO_CONTENT"
        | "205 RESET_CONTENT"
        | "206 PARTIAL_CONTENT"
        | "207 MULTI_STATUS"
        | "208 ALREADY_REPORTED"
        | "226 IM_USED"
        | "300 MULTIPLE_CHOICES"
        | "301 MOVED_PERMANENTLY"
        | "302 FOUND"
        | "302 MOVED_TEMPORARILY"
        | "303 SEE_OTHER"
        | "304 NOT_MODIFIED"
        | "305 USE_PROXY"
        | "307 TEMPORARY_REDIRECT"
        | "308 PERMANENT_REDIRECT"
        | "400 BAD_REQUEST"
        | "401 UNAUTHORIZED"
        | "402 PAYMENT_REQUIRED"
        | "403 FORBIDDEN"
        | "404 NOT_FOUND"
        | "405 METHOD_NOT_ALLOWED"
        | "406 NOT_ACCEPTABLE"
        | "407 PROXY_AUTHENTICATION_REQUIRED"
        | "408 REQUEST_TIMEOUT"
        | "409 CONFLICT"
        | "410 GONE"
        | "411 LENGTH_REQUIRED"
        | "412 PRECONDITION_FAILED"
        | "413 PAYLOAD_TOO_LARGE"
        | "413 REQUEST_ENTITY_TOO_LARGE"
        | "414 URI_TOO_LONG"
        | "414 REQUEST_URI_TOO_LONG"
        | "415 UNSUPPORTED_MEDIA_TYPE"
        | "416 REQUESTED_RANGE_NOT_SATISFIABLE"
        | "417 EXPECTATION_FAILED"
        | "418 I_AM_A_TEAPOT"
        | "419 INSUFFICIENT_SPACE_ON_RESOURCE"
        | "420 METHOD_FAILURE"
        | "421 DESTINATION_LOCKED"
        | "422 UNPROCESSABLE_ENTITY"
        | "423 LOCKED"
        | "424 FAILED_DEPENDENCY"
        | "425 TOO_EARLY"
        | "426 UPGRADE_REQUIRED"
        | "428 PRECONDITION_REQUIRED"
        | "429 TOO_MANY_REQUESTS"
        | "431 REQUEST_HEADER_FIELDS_TOO_LARGE"
        | "451 UNAVAILABLE_FOR_LEGAL_REASONS"
        | "500 INTERNAL_SERVER_ERROR"
        | "501 NOT_IMPLEMENTED"
        | "502 BAD_GATEWAY"
        | "503 SERVICE_UNAVAILABLE"
        | "504 GATEWAY_TIMEOUT"
        | "505 HTTP_VERSION_NOT_SUPPORTED"
        | "506 VARIANT_ALSO_NEGOTIATES"
        | "507 INSUFFICIENT_STORAGE"
        | "508 LOOP_DETECTED"
        | "509 BANDWIDTH_LIMIT_EXCEEDED"
        | "510 NOT_EXTENDED"
        | "511 NETWORK_AUTHENTICATION_REQUIRED";
      /** Format: date-time */
      timestamp?: string;
      message?: string;
      debugMessage?: string;
      result: string;
      data?: { [key: string]: unknown };
    };
    SchemaRequestModel: {
      /** @enum {string} */
      requestOperationType:
        | "CREATE"
        | "UPDATE"
        | "PROMOTE"
        | "CLAIM"
        | "DELETE";
      environment: string;
      appname?: string;
      remarks?: string;
      requestor?: string;
      topicname: string;
      schemafull: string;
      schemaversion?: string;
      forceRegister?: boolean;
      /** Format: int32 */
      teamId?: number;
    };
    TopicConfigEntry: {
      configKey?: string;
      configValue?: string;
    };
    TopicUpdateRequestModel: {
      /** @enum {string} */
      requestOperationType:
        | "CREATE"
        | "UPDATE"
        | "PROMOTE"
        | "CLAIM"
        | "DELETE";
      environment: string;
      appname?: string;
      remarks?: string;
      requestor?: string;
      topicname: string;
      /** Format: int32 */
      topicpartitions: number;
      replicationfactor: string;
      description: string;
      advancedTopicConfigEntries?: components["schemas"]["TopicConfigEntry"][];
      /** Format: int32 */
      teamId?: number;
      approvingTeamId?: string;
      deleteAssociatedSchema?: boolean;
      otherParams?: string;
    };
    TeamModel: {
      teamname: string;
      teammail?: string;
      teamphone: string;
      contactperson: string;
      /** Format: int32 */
      tenantId?: number;
      /** Format: int32 */
      teamId?: number;
      app?: string;
      showDeleteTeam?: boolean;
      tenantName?: string;
      envList?: string[];
    };
    SyncTopicUpdates: {
      sequence?: string;
      req_no?: string;
      topicName?: string;
      /** Format: int32 */
      partitions?: number;
      replicationFactor?: string;
      teamSelected?: string;
      envSelected?: string;
    };
    SyncTopicsBulk: {
      topicNames?: string[];
      sourceEnv?: string;
      selectedTeam?: string;
      typeOfSync?: string;
      topicDetails?: { [key: string]: unknown }[];
      topicSearchFilter?: string;
    };
    SyncConnectorUpdates: {
      sequence?: string;
      req_no?: string;
      connectorName?: string;
      teamSelected?: string;
      envSelected?: string;
    };
    SyncBackTopics: {
      topicIds?: string[];
      sourceEnv?: string;
      targetEnv?: string;
      typeOfSync?: string;
    };
    SyncBackAcls: {
      aclIds?: string[];
      sourceEnv?: string;
      targetEnv?: string;
      typeOfSync?: string;
    };
    SyncAclUpdates: {
      sequence?: string;
      req_no?: string;
      topicName?: string;
      teamSelected?: string;
      consumerGroup?: string;
      aclIp?: string;
      aclSsl?: string;
      aclType?: string;
      envSelected?: string;
    };
    KwRolesPermissionsModel: {
      /** Format: int32 */
      id?: number;
      roleId?: string;
      permission?: string;
      description?: string;
      rolePermission?: string;
      permissionEnabled?: string;
    };
    KwPropertiesModel: {
      kwKey?: string;
      kwValue?: string;
      kwDesc?: string;
    };
    TopicInfo: {
      /** Format: int32 */
      topicid: number;
      sequence: string;
      topicName: string;
      /** Format: int32 */
      noOfPartitions: number;
      description: string;
      noOfReplcias: string;
      teamname: string;
      cluster: string;
      environmentsList: string[];
      showEditTopic: boolean;
      showDeleteTopic: boolean;
      topicDeletable: boolean;
      totalNoPages: string;
      currentPage: string;
      allPageNos: string[];
      documentation?: string;
      clusterId?: string;
    };
    KafkaConnectorModel: {
      /** Format: int32 */
      sequence?: number;
      /** Format: int32 */
      connectorId?: number;
      connectorName?: string;
      connectorConfig?: string;
      environmentName?: string;
      environmentId?: string;
      teamName?: string;
      possibleTeams?: string[];
      allPageNos?: string[];
      totalNoPages?: string;
      currentPage?: string;
      remarks?: string;
      documentation?: string;
      environmentsList?: string[];
      description?: string;
      showEditConnector?: boolean;
      showDeleteConnector?: boolean;
      connectorDeletable?: boolean;
    };
    RequestVerdict: {
      reason?: string;
      /** @enum {string} */
      requestEntityType: "TOPIC" | "ACL" | "SCHEMA" | "CONNECTOR" | "USER";
      reqIds: string[];
    };
    RegisterUserInfoModel: {
      username: string;
      pwd?: string;
      team?: string;
      /** Format: int32 */
      teamId?: number;
      role?: string;
      fullname: string;
      mailid?: string;
      status?: string;
      /** Format: date-time */
      registeredTime?: string;
      approver?: string;
      registrationId?: string;
      /** Format: int32 */
      tenantId?: number;
      tenantName?: string;
    };
    RegisterSaasUserInfoModel: {
      fullname: string;
      mailid?: string;
      recaptchaStr?: string;
      status?: string;
      /** Format: date-time */
      registeredTime?: string;
      approver?: string;
      registrationId?: string;
      tenantName?: string;
    };
    SchemaPromotion: {
      targetEnvironment: string;
      sourceEnvironment: string;
      topicName: string;
      schemaVersion: string;
      schemaFull: string;
      forceRegister?: boolean;
      appName: string;
      remarks: string;
    };
    TopicCreateRequestModel: {
      /** @enum {string} */
      requestOperationType:
        | "CREATE"
        | "UPDATE"
        | "PROMOTE"
        | "CLAIM"
        | "DELETE";
      environment: string;
      appname?: string;
      remarks?: string;
      requestor?: string;
      topicname: string;
      /** Format: int32 */
      topicpartitions: number;
      replicationfactor: string;
      description: string;
      advancedTopicConfigEntries?: components["schemas"]["TopicConfigEntry"][];
      /** Format: int32 */
      teamId?: number;
      approvingTeamId?: string;
      deleteAssociatedSchema?: boolean;
      otherParams?: string;
    };
    KafkaConnectorRequestModel: {
      /** @enum {string} */
      requestOperationType:
        | "CREATE"
        | "UPDATE"
        | "PROMOTE"
        | "CLAIM"
        | "DELETE";
      environment: string;
      appname?: string;
      remarks?: string;
      requestor?: string;
      connectorName: string;
      connectorConfig: string;
      description: string;
      /** Format: int32 */
      teamId?: number;
      otherParams?: string;
    };
    AclRequestsModel: {
      /** @enum {string} */
      requestOperationType:
        | "CREATE"
        | "UPDATE"
        | "PROMOTE"
        | "CLAIM"
        | "DELETE";
      environment: string;
      appname?: string;
      remarks?: string;
      requestor?: string;
      topicname: string;
      consumergroup?: string;
      acl_ip?: string[];
      acl_ssl?: string[];
      aclPatternType: string;
      transactionalId?: string;
      /** Format: int32 */
      teamId: number;
      /** @enum {string} */
      aclType: "PRODUCER" | "CONSUMER";
      /** @enum {string} */
      aclIpPrincipleType: "IP_ADDRESS" | "PRINCIPAL" | "USERNAME";
      /** Format: int32 */
      requestingteam?: number;
      aclResourceType?: string;
      otherParams?: string;
    };
    KwTenantModel: {
      tenantName: string;
      tenantDesc: string;
      /** Format: int32 */
      tenantId?: number;
      licenseExpiryDate?: string;
      contactPerson?: string;
      inTrialPhase?: boolean;
      numberOfDays?: string;
      numberOfHours?: string;
      orgName?: string;
      authorizedToDelete?: boolean;
      emailId?: string;
      activeTenant?: boolean;
    };
    EnvModel: {
      name: string;
      type: string;
      /** Format: int32 */
      clusterId: number;
      topicprefix?: string;
      topicsuffix?: string;
      otherParams?: string;
      id?: string;
      defaultPartitions?: string;
      maxPartitions?: string;
      defaultReplicationFactor?: string;
      maxReplicationFactor?: string;
      associatedEnv?: components["schemas"]["EnvTag"];
      /** Format: int32 */
      tenantId?: number;
    };
    EnvTag: {
      id?: string;
      name?: string;
    };
    KwClustersModel: {
      /** Format: int32 */
      clusterId?: number;
      clusterName: string;
      bootstrapServers: string;
      /** @enum {string} */
      protocol:
        | "PLAINTEXT"
        | "SSL"
        | "SASL_PLAIN"
        | "SASL_SSL_PLAIN_MECHANISM"
        | "SASL_SSL_GSSAPI_MECHANISM"
        | "SASL_SSL_SCRAM_MECHANISM_256"
        | "SASL_SSL_SCRAM_MECHANISM_512";
      clusterType: string;
      kafkaFlavor: string;
      projectName?: string;
      serviceName?: string;
      publicKey?: string;
      showDeleteCluster?: boolean;
      clusterStatus?: string;
      totalNoPages?: string;
      allPageNos?: string[];
    };
    RequestEntityStatusCount: {
      /** @enum {string} */
      requestEntityType?: "TOPIC" | "ACL" | "SCHEMA" | "CONNECTOR" | "USER";
      requestStatusCountSet?: components["schemas"]["RequestStatusCount"][];
      requestsOperationTypeCountSet?: components["schemas"]["RequestsOperationTypeCount"][];
    };
    RequestStatusCount: {
      /** @enum {string} */
      requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
      /** Format: int64 */
      count?: number;
    };
    RequestsCountOverview: {
      requestEntityStatistics?: components["schemas"]["RequestEntityStatusCount"][];
    };
    RequestsOperationTypeCount: {
      /** @enum {string} */
      requestOperationType?:
        | "CREATE"
        | "UPDATE"
        | "PROMOTE"
        | "CLAIM"
        | "DELETE";
      /** Format: int64 */
      count?: number;
    };
    TopicRequestsResponseModel: {
      environment: string;
      environmentName: string;
      requestor: string;
      /** Format: int32 */
      teamId: number;
      teamname: string;
      /** @enum {string} */
      requestOperationType:
        | "CREATE"
        | "UPDATE"
        | "PROMOTE"
        | "CLAIM"
        | "DELETE";
      /** @enum {string} */
      requestStatus: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
      /** Format: date-time */
      requesttime: string;
      requesttimestring: string;
      currentPage: string;
      totalNoPages: string;
      allPageNos: string[];
      approvingTeamDetails: string;
      approver?: string;
      /** Format: date-time */
      approvingtime?: string;
      remarks?: string;
      appname?: string;
      otherParams?: string;
      topicname: string;
      /** Format: int32 */
      topicpartitions: number;
      replicationfactor: string;
      description: string;
      /** Format: int32 */
      topicid: number;
      deleteAssociatedSchema: boolean;
      advancedTopicConfigEntries: components["schemas"]["TopicConfigEntry"][];
      approvingTeamId?: string;
      sequence?: string;
      possibleTeams?: string[];
      deletable?: boolean;
      editable?: boolean;
    };
    ChartsJsOverview: {
      data?: number[];
      labels?: string[];
      colors?: string[];
      options?: components["schemas"]["Options"];
      series?: string[];
      titleForReport?: string;
      xaxisLabel?: string;
      yaxisLabel?: string;
    };
    Options: {
      title?: components["schemas"]["Title"];
      scales?: components["schemas"]["Scales"];
    };
    Scales: {
      yaxes?: components["schemas"]["YAx"][];
      xaxes?: components["schemas"]["YAx"][];
    };
    TeamOverview: {
      producerAclsPerTeamsOverview?: components["schemas"]["ChartsJsOverview"];
      consumerAclsPerTeamsOverview?: components["schemas"]["ChartsJsOverview"];
      aclsPerEnvOverview?: components["schemas"]["ChartsJsOverview"];
      topicsPerTeamsOverview?: components["schemas"]["ChartsJsOverview"];
      topicsPerTeamPerEnvOverview?: components["schemas"]["ChartsJsOverview"];
      topicsPerEnvOverview?: components["schemas"]["ChartsJsOverview"];
      partitionsPerEnvOverview?: components["schemas"]["ChartsJsOverview"];
      activityLogOverview?: components["schemas"]["ChartsJsOverview"];
      tenantName?: string;
    };
    Title: {
      display?: boolean;
      text?: string;
      position?: string;
      fontColor?: string;
      fontFamily?: string;
      fontStyle?: string;
    };
    YAx: {
      id?: string;
      type?: string;
      display?: boolean;
      position?: string;
    };
    EnvModelResponse: {
      id: string;
      name: string;
      type: string;
      /** Format: int32 */
      tenantId: number;
      /** Format: int32 */
      clusterId: number;
      tenantName: string;
      clusterName: string;
      envStatus: string;
      otherParams: string;
      showDeleteEnv: boolean;
      totalNoPages: string;
      allPageNos: string[];
      associatedEnv?: components["schemas"]["EnvTag"];
      topicprefix?: string;
      topicsuffix?: string;
      defaultPartitions?: string;
      maxPartitions?: string;
      defaultReplicationFactor?: string;
      maxReplicationFactor?: string;
      /** @enum {string} */
      clusterType?:
        | "ALL"
        | "KAFKA"
        | "SCHEMA_REGISTRY"
        | "KAFKA_CONNECT"
        | "KAFKA_REST_API";
    };
    AclInfo: {
      sequence?: string;
      req_no?: string;
      acl_ip?: string;
      acl_ssl?: string;
      topicname?: string;
      topictype?: string;
      consumergroup?: string;
      environment?: string;
      environmentName?: string;
      teamname?: string;
      /** Format: int32 */
      teamid?: number;
      operation?: string;
      permission?: string;
      transactionalId?: string;
      aclPatternType?: string;
      totalNoPages?: string;
      allPageNos?: string[];
      possibleTeams?: string[];
      currentPage?: string;
      showDeleteAcl?: boolean;
      /** @enum {string} */
      kafkaFlavorType?:
        | "APACHE_KAFKA"
        | "AIVEN_FOR_APACHE_KAFKA"
        | "CONFLUENT"
        | "CONFLUENT_CLOUD"
        | "OTHERS";
    };
    SchemaRequestsResponseModel: {
      environment: string;
      environmentName: string;
      requestor: string;
      /** Format: int32 */
      teamId: number;
      teamname: string;
      /** @enum {string} */
      requestOperationType:
        | "CREATE"
        | "UPDATE"
        | "PROMOTE"
        | "CLAIM"
        | "DELETE";
      /** @enum {string} */
      requestStatus: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
      /** Format: date-time */
      requesttime: string;
      requesttimestring: string;
      currentPage: string;
      totalNoPages: string;
      allPageNos: string[];
      approvingTeamDetails: string;
      approver?: string;
      /** Format: date-time */
      approvingtime?: string;
      remarks?: string;
      appname?: string;
      otherParams?: string;
      topicname: string;
      schemafull: string;
      /** Format: int32 */
      req_no: number;
      forceRegister: boolean;
      schemaversion?: string;
      deletable?: boolean;
      editable?: boolean;
    };
    SchemaOverview: {
      topicExists?: boolean;
      schemaExists?: boolean;
      prefixAclsExists?: boolean;
      txnAclsExists?: boolean;
      allSchemaVersions?: { [key: string]: number[] };
      latestVersion?: { [key: string]: number };
      schemaPromotionDetails?: { [key: string]: { [key: string]: string } };
      schemaDetails?: { [key: string]: string }[];
    };
    KafkaConnectorRequestsResponseModel: {
      environment: string;
      environmentName: string;
      requestor: string;
      /** Format: int32 */
      teamId: number;
      teamname: string;
      /** @enum {string} */
      requestOperationType:
        | "CREATE"
        | "UPDATE"
        | "PROMOTE"
        | "CLAIM"
        | "DELETE";
      /** @enum {string} */
      requestStatus: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
      /** Format: date-time */
      requesttime: string;
      requesttimestring: string;
      currentPage: string;
      totalNoPages: string;
      allPageNos: string[];
      approvingTeamDetails: string;
      approver?: string;
      /** Format: date-time */
      approvingtime?: string;
      remarks?: string;
      appname?: string;
      otherParams?: string;
      connectorName: string;
      description: string;
      connectorConfig: string;
      /** Format: int32 */
      connectorId: number;
      possibleTeams?: string[];
      approvingTeamId?: string;
      deletable?: boolean;
      editable?: boolean;
    };
    ConnectorOverview: {
      topicInfoList?: components["schemas"]["KafkaConnectorModel"][];
      topicHistoryList?: components["schemas"]["TopicHistory"][];
      promotionDetails?: { [key: string]: string };
      connectorExists?: boolean;
      topicDocumentation?: string;
      /** Format: int32 */
      topicIdForDocumentation?: number;
    };
    TopicHistory: {
      environmentName?: string;
      teamName?: string;
      requestedBy?: string;
      requestedTime?: string;
      approvedBy?: string;
      approvedTime?: string;
      remarks?: string;
    };
    JmxOverview: {
      brokerTopMetricsOverview?: components["schemas"]["ChartsJsOverview"];
    };
    ServerConfigProperties: {
      id?: string;
      key?: string;
      value?: string;
    };
    ActivityLog: {
      /** Format: int32 */
      req_no?: number;
      /** Format: int32 */
      tenantId?: number;
      activityName?: string;
      activityType?: string;
      /** Format: date-time */
      activityTime?: string;
      activityTimeString?: string;
      details?: string;
      user?: string;
      /** Format: int32 */
      teamId?: number;
      env?: string;
      envName?: string;
      team?: string;
      totalNoPages?: string;
      currentPage?: string;
      allPageNos?: string[];
    };
    TopicOverview: {
      topicExists?: boolean;
      schemaExists?: boolean;
      prefixAclsExists?: boolean;
      txnAclsExists?: boolean;
      topicInfoList?: components["schemas"]["TopicInfo"][];
      aclInfoList?: components["schemas"]["AclInfo"][];
      prefixedAclInfoList?: components["schemas"]["AclInfo"][];
      transactionalAclInfoList?: components["schemas"]["AclInfo"][];
      topicHistoryList?: components["schemas"]["TopicHistory"][];
      topicPromotionDetails?: { [key: string]: string };
      topicDocumentation?: string;
      /** Format: int32 */
      topicIdForDocumentation?: number;
    };
    AclRequestsResponseModel: {
      environment: string;
      environmentName: string;
      requestor: string;
      /** Format: int32 */
      teamId: number;
      teamname: string;
      /** @enum {string} */
      requestOperationType:
        | "CREATE"
        | "UPDATE"
        | "PROMOTE"
        | "CLAIM"
        | "DELETE";
      /** @enum {string} */
      requestStatus: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
      /** Format: date-time */
      requesttime: string;
      requesttimestring: string;
      currentPage: string;
      totalNoPages: string;
      allPageNos: string[];
      approvingTeamDetails: string;
      approver?: string;
      /** Format: date-time */
      approvingtime?: string;
      remarks?: string;
      appname?: string;
      otherParams?: string;
      topicname: string;
      aclPatternType: string;
      /** @enum {string} */
      aclType: "PRODUCER" | "CONSUMER";
      /** @enum {string} */
      aclIpPrincipleType: "IP_ADDRESS" | "PRINCIPAL" | "USERNAME";
      /** Format: int32 */
      req_no: number;
      /** Format: int32 */
      requestingteam: number;
      requestingTeamName: string;
      consumergroup: string;
      acl_ip?: string[];
      acl_ssl?: string[];
      transactionalId?: string;
      aclResourceType?: string;
      deletable?: boolean;
      editable?: boolean;
    };
  };
};

export type operations = {
  updateUserTeamFromSwitchTeams: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInfoModel"];
      };
    };
  };
  uploadSchema: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemaRequestModel"];
      };
    };
  };
  updateUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInfoModel"];
      };
    };
  };
  createTopicsUpdateRequest: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TopicUpdateRequestModel"];
      };
    };
  };
  updateTeam: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamModel"];
      };
    };
  };
  updateSyncTopics: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SyncTopicUpdates"][];
      };
    };
  };
  updateSyncTopicsBulk: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SyncTopicsBulk"];
      };
    };
  };
  updateSyncConnectors: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SyncConnectorUpdates"][];
      };
    };
  };
  updateSyncBackTopics: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SyncBackTopics"];
      };
    };
  };
  updateSyncBackAcls: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SyncBackAcls"];
      };
    };
  };
  updateSyncAcls: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SyncAclUpdates"][];
      };
    };
  };
  updateProfile: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInfoModel"];
      };
    };
  };
  updatePermissions: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["KwRolesPermissionsModel"][];
      };
    };
  };
  updateKwCustomProperty: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["KwPropertiesModel"];
      };
    };
  };
  udpateTenant: {
    parameters: {
      query: {
        orgName: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  udpateTenantExtension: {
    parameters: {
      query: {
        selectedTenantExtensionPeriod: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  sendMessageToAdmin: {
    parameters: {
      query: {
        contactFormSubject: string;
        contactFormMessage: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  saveTopicDocumentation: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TopicInfo"];
      };
    };
  };
  saveConnectorDocumentation: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["KafkaConnectorModel"];
      };
    };
  };
  resetPassword: {
    parameters: {
      query: {
        username: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": { [key: string]: string };
        };
      };
    };
  };
  /** Updates the Status of a request to Deleted */
  deleteRequest: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
      /** Multi Status */
      207: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
      /** Bad Request */
      405: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestVerdict"];
      };
    };
  };
  /** Updates the Status of a request to Declined */
  declineRequest: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
      /** Multi Status */
      207: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
      /** Bad Request */
      405: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestVerdict"];
      };
    };
  };
  /** Updates the Status of a request to Approved and provisions the request */
  approveRequest: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
      /** Multi Status */
      207: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
      /** Bad Request */
      405: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ApiResponse"][];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestVerdict"];
      };
    };
  };
  registerUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterUserInfoModel"];
      };
    };
  };
  registerUserSaas: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterSaasUserInfoModel"];
      };
    };
  };
  promoteSchema: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemaPromotion"];
      };
    };
  };
  logout: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": { [key: string]: string };
        };
      };
    };
  };
  approveTopicRequests: {
    parameters: {
      query: {
        topicId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  declineTopicRequests: {
    parameters: {
      query: {
        topicId: string;
        reasonForDecline: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  execSchemaRequests: {
    parameters: {
      query: {
        avroSchemaReqId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  execSchemaRequestsDecline: {
    parameters: {
      query: {
        avroSchemaReqId: string;
        reasonForDecline: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  declineNewUserRequests: {
    parameters: {
      query: {
        username: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  approveNewUserRequests: {
    parameters: {
      query: {
        username: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  approveTopicRequests_1: {
    parameters: {
      query: {
        connectorId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  declineConnectorRequests: {
    parameters: {
      query: {
        connectorId: string;
        reasonForDecline: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  approveAclRequests: {
    parameters: {
      query: {
        req_no: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  declineAclRequests: {
    parameters: {
      query: {
        req_no: string;
        reasonForDecline: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteUser: {
    parameters: {
      query: {
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteTopicRequests: {
    parameters: {
      query: {
        topicId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteTenant: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteTeam: {
    parameters: {
      query: {
        teamId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteSchemaRequests: {
    parameters: {
      query: {
        req_no: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteRole: {
    parameters: {
      query: {
        roleId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteEnvironment: {
    parameters: {
      query: {
        envId: string;
        envType: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteConnectorRequests: {
    parameters: {
      query: {
        connectorId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteCluster: {
    parameters: {
      query: {
        clusterId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteAclRequests: {
    parameters: {
      query: {
        req_no: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createTopicsCreateRequest: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TopicCreateRequestModel"];
      };
    };
  };
  createTopicDeleteRequest: {
    parameters: {
      query: {
        topicName: string;
        env: string;
        deleteAssociatedSchema?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteAclSubscriptionRequest: {
    parameters: {
      query: {
        req_no: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createConnectorRequest: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["KafkaConnectorRequestModel"];
      };
    };
  };
  createConnectorDeleteRequest: {
    parameters: {
      query: {
        connectorName: string;
        env: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createClaimTopicRequest: {
    parameters: {
      query: {
        topicName: string;
        env: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createClaimConnectorRequest: {
    parameters: {
      query: {
        connectorName: string;
        env: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createAcl: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AclRequestsModel"];
      };
    };
  };
  changePwd: {
    parameters: {
      query: {
        changePwd: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  addTenantId: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["KwTenantModel"];
      };
    };
  };
  addRoleId: {
    parameters: {
      query: {
        roleId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  addNewUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInfoModel"];
      };
    };
  };
  addNewTeam: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamModel"];
      };
    };
  };
  addNewEnv: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EnvModel"];
      };
    };
  };
  addNewCluster: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["KwClustersModel"];
      };
    };
  };
  getSwitchTeams: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamModel"][];
        };
      };
    };
  };
  testClusterApiConnection: {
    parameters: {
      query: {
        clusterApiUrl: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  shutdownApp: {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  showUsers: {
    parameters: {
      query: {
        teamName?: string;
        pageNo?: string;
        searchUserParam?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserInfoModel"][];
        };
      };
    };
  };
  resetMemoryCache: {
    parameters: {
      path: {
        tenantName: string;
        entityType: string;
        operationType: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  resetCache: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getRequestStatistics: {
    parameters: {
      query: {
        requestMode: "TO_APPROVE" | "MY_APPROVALS" | "MY_REQUESTS";
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["RequestsCountOverview"];
        };
      };
    };
  };
  getRegistrationInfoFromId: {
    parameters: {
      query: {
        userRegistrationId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["RegisterUserInfoModel"];
        };
      };
    };
  };
  getUserDetails: {
    parameters: {
      query: {
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserInfoModel"];
        };
      };
    };
  };
  getUpdateEnvStatus: {
    parameters: {
      query: {
        envId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getTopics: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        topicnamesearch?: string;
        teamName?: string;
        topicType?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TopicInfo"][][];
        };
      };
    };
  };
  getTopicsRowView: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        topicnamesearch?: string;
        teamName?: string;
        topicType?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TopicInfo"][];
        };
      };
    };
  };
  getTopicsOnly: {
    parameters: {
      query: {
        isMyTeamTopics?: string;
        envSelected?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  getTopicsCountPerEnv: {
    parameters: {
      query: {
        sourceEnvSelected: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getTopicTeam: {
    parameters: {
      query: {
        topicName: string;
        patternType?: "PREFIXED" | "LITERAL";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getTopicRequests: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        env?: string;
        isMyRequest?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TopicRequestsResponseModel"][];
        };
      };
    };
  };
  getTopicRequestsForApprover: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        teamId?: number;
        env?: string;
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TopicRequestsResponseModel"][];
        };
      };
    };
  };
  getTopicEvents: {
    parameters: {
      query: {
        envId: string;
        topicName: string;
        consumerGroupId: string;
        offsetId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getTopicDetailsPerEnv: {
    parameters: {
      query: {
        envSelected: string;
        topicname: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  getTenants: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KwTenantModel"][];
        };
      };
    };
  };
  getTenantsInfo: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: number };
        };
      };
    };
  };
  getTeamsOverview: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamOverview"][];
        };
      };
    };
  };
  getTeamDetails: {
    parameters: {
      query: {
        teamId: number;
        tenantName: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamModel"];
        };
      };
    };
  };
  getSyncTopics: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        topicnamesearch?: string;
        showAllTopics?: string;
        isBulkOption?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  getSyncEnv: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string }[];
        };
      };
    };
  };
  getSyncTopics_1: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        connectornamesearch?: string;
        isBulkOption?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KafkaConnectorModel"][];
        };
      };
    };
  };
  getSyncConnectorsEnv: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EnvModelResponse"][];
        };
      };
    };
  };
  getSyncBackAcls: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        topicnamesearch?: string;
        teamName?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AclInfo"][];
        };
      };
    };
  };
  getSyncAcls: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        topicnamesearch?: string;
        showAllAcls?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AclInfo"][];
        };
      };
    };
  };
  getStandardEnvNames: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  getSchemaRequests: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        topic?: string;
        env?: string;
        isMyRequest?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SchemaRequestsResponseModel"][];
        };
      };
    };
  };
  getSchemaRequestsForApprover: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        topic?: string;
        env?: string;
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SchemaRequestsResponseModel"][];
        };
      };
    };
  };
  getSchemaRegEnvs: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EnvModelResponse"][];
        };
      };
    };
  };
  getSchemaOfTopic: {
    parameters: {
      query: {
        topicnamesearch: string;
        schemaVersionSearch?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SchemaOverview"];
        };
      };
    };
  };
  getRoles: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  getRolesFromDb: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  getRequestTypeStatuses: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  getPermissions: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: { [key: string]: boolean }[] };
        };
      };
    };
  };
  getPermissionDescriptions: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getNewUserRequests: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["RegisterUserInfoModel"][];
        };
      };
    };
  };
  getMyTenantInfo: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KwTenantModel"];
        };
      };
    };
  };
  getMyProfileInfo: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserInfoModel"];
        };
      };
    };
  };
  getKwReport: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getKwPubkey: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getSupportedKafkaProtocols: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string }[];
        };
      };
    };
  };
  getKafkaConnectEnvs: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EnvModelResponse"][];
        };
      };
    };
  };
  getExtensionPeriods: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  getEnvs: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EnvModelResponse"][];
        };
      };
    };
  };
  getEnvsPaginated: {
    parameters: {
      query: {
        pageNo: string;
        envId?: string;
        searchEnvParam?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EnvModelResponse"][];
        };
      };
    };
  };
  getRequestForSchemas: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EnvModelResponse"][];
        };
      };
    };
  };
  getEnvsBaseCluster: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EnvModelResponse"][];
        };
      };
    };
  };
  getEnvsBaseClusterFilteredForTeam: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EnvModelResponse"][];
        };
      };
    };
  };
  getEnvParams: {
    parameters: {
      query: {
        envSelected: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string[] };
        };
      };
    };
  };
  getEnvDetails: {
    parameters: {
      query: {
        envSelected: string;
        envType: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EnvModelResponse"];
        };
      };
    };
  };
  getDbAuth: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getDashboardStats: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getConsumerOffsets: {
    parameters: {
      query: {
        env: string;
        topicName: string;
        consumerGroupId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string }[];
        };
      };
    };
  };
  getConnectors: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        connectornamesearch?: string;
        teamName?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KafkaConnectorModel"][][];
        };
      };
    };
  };
  getConnectorRequests: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KafkaConnectorRequestsResponseModel"][];
        };
      };
    };
  };
  getCreatedConnectorRequests: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        env?: string;
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KafkaConnectorRequestsResponseModel"][];
        };
      };
    };
  };
  getConnectorOverview: {
    parameters: {
      query: {
        connectornamesearch: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ConnectorOverview"];
        };
      };
    };
  };
  getConnectorDetails: {
    parameters: {
      query: {
        env: string;
        connectorName: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getConnectorDetailsPerEnv: {
    parameters: {
      query: {
        envSelected: string;
        connectorName: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  getClusters: {
    parameters: {
      query: {
        clusterType: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KwClustersModel"][];
        };
      };
    };
  };
  getClustersPaginated: {
    parameters: {
      query: {
        clusterType: string;
        pageNo: string;
        clusterId?: string;
        searchClusterParam?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KwClustersModel"][];
        };
      };
    };
  };
  getClusterInfoFromEnv: {
    parameters: {
      query: {
        envSelected: string;
        envType: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getClusterDetails: {
    parameters: {
      query: {
        clusterId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["KwClustersModel"];
        };
      };
    };
  };
  getBrokerTopMetrics: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["JmxOverview"];
        };
      };
    };
  };
  getBasicInfo: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  getAuth: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getAllTeamsSU: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamModel"][];
        };
      };
    };
  };
  getAllTeamsSUOnly: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  getAllTeamsSUFromRegisterUsers: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamModel"][];
        };
      };
    };
  };
  getAllEditableProps: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string }[];
        };
      };
    };
  };
  getAllProperties: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ServerConfigProperties"][];
        };
      };
    };
  };
  getAivenServiceAccounts: {
    parameters: {
      query: {
        env: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  getAivenServiceAccountDetails: {
    parameters: {
      query: {
        env: string;
        topicName: string;
        userName: string;
        aclReqNo: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  getAdvancedTopicConfigs: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  showActivityLog: {
    parameters: {
      query: {
        env?: string;
        pageNo: string;
        currentPage?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityLog"][];
        };
      };
    };
  };
  getActivityLogForTeamOverview: {
    parameters: {
      query: {
        activityLogForTeam: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamOverview"];
        };
      };
    };
  };
  getActivationInfo: {
    parameters: {
      query: {
        userActivationId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getAcls: {
    parameters: {
      query: {
        topicnamesearch: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TopicOverview"];
        };
      };
    };
  };
  getAclsCountPerEnv: {
    parameters: {
      query: {
        sourceEnvSelected: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
  getAclRequests: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        topic?: string;
        env?: string;
        aclType?: "PRODUCER" | "CONSUMER";
        isMyRequest?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AclRequestsResponseModel"][];
        };
      };
    };
  };
  getAclRequestsForApprover: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        topic?: string;
        env?: string;
        aclType?: "PRODUCER" | "CONSUMER";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AclRequestsResponseModel"][];
        };
      };
    };
  };
  getAclCommand: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: string };
        };
      };
    };
  };
};

export type external = {};

export enum ApiPaths {
  updateUserTeamFromSwitchTeams = "/user/updateTeam",
  uploadSchema = "/uploadSchema",
  updateUser = "/updateUser",
  createTopicsUpdateRequest = "/updateTopics",
  updateTeam = "/updateTeam",
  updateSyncTopics = "/updateSyncTopics",
  updateSyncTopicsBulk = "/updateSyncTopicsBulk",
  updateSyncConnectors = "/updateSyncConnectors",
  updateSyncBackTopics = "/updateSyncBackTopics",
  updateSyncBackAcls = "/updateSyncBackAcls",
  updateSyncAcls = "/updateSyncAcls",
  updateProfile = "/updateProfile",
  updatePermissions = "/updatePermissions",
  updateKwCustomProperty = "/updateKwCustomProperty",
  udpateTenant = "/udpateTenant",
  udpateTenantExtension = "/udpateTenantExtension",
  sendMessageToAdmin = "/sendMessageToAdmin",
  saveTopicDocumentation = "/saveTopicDocumentation",
  saveConnectorDocumentation = "/saveConnectorDocumentation",
  resetPassword = "/resetPassword",
  deleteRequest = "/request/delete",
  declineRequest = "/request/decline",
  approveRequest = "/request/approve",
  registerUser = "/registerUser",
  registerUserSaas = "/registerUserSaas",
  promoteSchema = "/promote/schema",
  logout = "/logout",
  approveTopicRequests = "/execTopicRequests",
  declineTopicRequests = "/execTopicRequestsDecline",
  execSchemaRequests = "/execSchemaRequests",
  execSchemaRequestsDecline = "/execSchemaRequestsDecline",
  declineNewUserRequests = "/execNewUserRequestDecline",
  approveNewUserRequests = "/execNewUserRequestApprove",
  approveTopicRequests_1 = "/execConnectorRequests",
  declineConnectorRequests = "/execConnectorRequestsDecline",
  approveAclRequests = "/execAclRequest",
  declineAclRequests = "/execAclRequestDecline",
  deleteUser = "/deleteUserRequest",
  deleteTopicRequests = "/deleteTopicRequests",
  deleteTenant = "/deleteTenant",
  deleteTeam = "/deleteTeamRequest",
  deleteSchemaRequests = "/deleteSchemaRequests",
  deleteRole = "/deleteRole",
  deleteEnvironment = "/deleteEnvironmentRequest",
  deleteConnectorRequests = "/deleteConnectorRequests",
  deleteCluster = "/deleteCluster",
  deleteAclRequests = "/deleteAclRequests",
  createTopicsCreateRequest = "/createTopics",
  createTopicDeleteRequest = "/createTopicDeleteRequest",
  deleteAclSubscriptionRequest = "/createDeleteAclSubscriptionRequest",
  createConnectorRequest = "/createConnector",
  createConnectorDeleteRequest = "/createConnectorDeleteRequest",
  createClaimTopicRequest = "/createClaimTopicRequest",
  createClaimConnectorRequest = "/createClaimConnectorRequest",
  createAcl = "/createAcl",
  changePwd = "/chPwd",
  addTenantId = "/addTenantId",
  addRoleId = "/addRoleId",
  addNewUser = "/addNewUser",
  addNewTeam = "/addNewTeam",
  addNewEnv = "/addNewEnv",
  addNewCluster = "/addNewCluster",
  getSwitchTeams = "/user/:userId/switchTeamsList",
  testClusterApiConnection = "/testClusterApiConnection",
  shutdownApp = "/shutdownContext",
  showUsers = "/showUserList",
  resetMemoryCache = "/resetMemoryCache/:tenantName/:entityType/:operationType",
  resetCache = "/resetCache",
  getRequestStatistics = "/requests/statistics",
  getRegistrationInfoFromId = "/getUserInfoFromRegistrationId",
  getUserDetails = "/getUserDetails",
  getUpdateEnvStatus = "/getUpdateEnvStatus",
  getTopics = "/getTopics",
  getTopicsRowView = "/getTopicsRowView",
  getTopicsOnly = "/getTopicsOnly",
  getTopicsCountPerEnv = "/getTopicsCountPerEnv",
  getTopicTeam = "/getTopicTeam",
  getTopicRequests = "/getTopicRequests",
  getTopicRequestsForApprover = "/getTopicRequestsForApprover",
  getTopicEvents = "/getTopicEvents",
  getTopicDetailsPerEnv = "/getTopicDetailsPerEnv",
  getTenants = "/getTenants",
  getTenantsInfo = "/getTenantsInfo",
  getTeamsOverview = "/getTeamsOverview",
  getTeamDetails = "/getTeamDetails",
  getSyncTopics = "/getSyncTopics",
  getSyncEnv = "/getSyncEnv",
  getSyncTopics_1 = "/getSyncConnectors",
  getSyncConnectorsEnv = "/getSyncConnectorsEnv",
  getSyncBackAcls = "/getSyncBackAcls",
  getSyncAcls = "/getSyncAcls",
  getStandardEnvNames = "/getStandardEnvNames",
  getSchemaRequests = "/getSchemaRequests",
  getSchemaRequestsForApprover = "/getSchemaRequestsForApprover",
  getSchemaRegEnvs = "/getSchemaRegEnvs",
  getSchemaOfTopic = "/getSchemaOfTopic",
  getRoles = "/getRoles",
  getRolesFromDb = "/getRolesFromDb",
  getRequestTypeStatuses = "/getRequestTypeStatuses",
  getPermissions = "/getPermissions",
  getPermissionDescriptions = "/getPermissionDescriptions",
  getNewUserRequests = "/getNewUserRequests",
  getMyTenantInfo = "/getMyTenantInfo",
  getMyProfileInfo = "/getMyProfileInfo",
  getKwReport = "/getKwReport",
  getKwPubkey = "/getKwPubkey",
  getSupportedKafkaProtocols = "/getKafkaProtocols",
  getKafkaConnectEnvs = "/getKafkaConnectEnvs",
  getExtensionPeriods = "/getExtensionPeriods",
  getEnvs = "/getEnvs",
  getEnvsPaginated = "/getEnvsPaginated",
  getRequestForSchemas = "/getEnvsForSchemaRequests",
  getEnvsBaseCluster = "/getEnvsBaseCluster",
  getEnvsBaseClusterFilteredForTeam = "/getEnvsBaseClusterFilteredForTeam",
  getEnvParams = "/getEnvParams",
  getEnvDetails = "/getEnvDetails",
  getDbAuth = "/getDbAuth",
  getDashboardStats = "/getDashboardStats",
  getConsumerOffsets = "/getConsumerOffsets",
  getConnectors = "/getConnectors",
  getConnectorRequests = "/getConnectorRequests",
  getCreatedConnectorRequests = "/getConnectorRequestsForApproval",
  getConnectorOverview = "/getConnectorOverview",
  getConnectorDetails = "/getConnectorDetails",
  getConnectorDetailsPerEnv = "/getConnectorDetailsPerEnv",
  getClusters = "/getClusters",
  getClustersPaginated = "/getClustersPaginated",
  getClusterInfoFromEnv = "/getClusterInfoFromEnv",
  getClusterDetails = "/getClusterDetails",
  getBrokerTopMetrics = "/getBrokerTopMetrics",
  getBasicInfo = "/getBasicInfo",
  getAuth = "/getAuth",
  getAllTeamsSU = "/getAllTeamsSU",
  getAllTeamsSUOnly = "/getAllTeamsSUOnly",
  getAllTeamsSUFromRegisterUsers = "/getAllTeamsSUFromRegisterUsers",
  getAllEditableProps = "/getAllServerEditableConfig",
  getAllProperties = "/getAllServerConfig",
  getAivenServiceAccounts = "/getAivenServiceAccounts",
  getAivenServiceAccountDetails = "/getAivenServiceAccount",
  getAdvancedTopicConfigs = "/getAdvancedTopicConfigs",
  showActivityLog = "/getActivityLogPerEnv",
  getActivityLogForTeamOverview = "/getActivityLogForTeamOverview",
  getActivationInfo = "/getActivationInfo",
  getAcls = "/getAcls",
  getAclsCountPerEnv = "/getAclsCountPerEnv",
  getAclRequests = "/getAclRequests",
  getAclRequestsForApprover = "/getAclRequestsForApprover",
  getAclCommand = "/getAclCommands",
}
