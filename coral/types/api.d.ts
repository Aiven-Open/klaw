/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/validate/schema": {
    post: operations["validateSchema"];
  };
  "/user/updateTeam": {
    post: operations["updateUserTeamFromSwitchTeams"];
  };
  "/uploadSchema": {
    post: operations["uploadSchema"];
  };
  "/updateUser": {
    post: operations["updateUser"];
  };
  "/updateTopics": {
    post: operations["createTopicsUpdateRequest"];
  };
  "/updateTeam": {
    post: operations["updateTeam"];
  };
  "/updateSyncTopics": {
    post: operations["updateSyncTopics"];
  };
  "/updateSyncTopicsBulk": {
    post: operations["updateSyncTopicsBulk"];
  };
  "/updateSyncConnectors": {
    post: operations["updateSyncConnectors"];
  };
  "/updateSyncBackTopics": {
    post: operations["updateSyncBackTopics"];
  };
  "/updateSyncBackAcls": {
    post: operations["updateSyncBackAcls"];
  };
  "/updateSyncAcls": {
    post: operations["updateSyncAcls"];
  };
  "/updateProfile": {
    post: operations["updateProfile"];
  };
  "/updatePermissions": {
    post: operations["updatePermissions"];
  };
  "/updateKwCustomProperty": {
    post: operations["updateKwCustomProperty"];
  };
  "/udpateTenant": {
    post: operations["udpateTenant"];
  };
  "/udpateTenantExtension": {
    post: operations["udpateTenantExtension"];
  };
  "/sendMessageToAdmin": {
    post: operations["sendMessageToAdmin"];
  };
  "/saveTopicDocumentation": {
    post: operations["saveTopicDocumentation"];
  };
  "/saveConnectorDocumentation": {
    post: operations["saveConnectorDocumentation"];
  };
  "/resetPassword": {
    post: operations["resetPassword"];
  };
  "/request/delete": {
    /**
     * Delete a Request 
     * @description Updates the Status of a request to Deleted
     */
    post: operations["deleteRequest"];
  };
  "/request/decline": {
    /**
     * Decline a Request 
     * @description Updates the Status of a request to Declined
     */
    post: operations["declineRequest"];
  };
  "/request/approve": {
    /**
     * Approve a Request 
     * @description Updates the Status of a request to Approved and provisions the request
     */
    post: operations["approveRequest"];
  };
  "/registerUser": {
    post: operations["registerUser"];
  };
  "/registerUserSaas": {
    post: operations["registerUserSaas"];
  };
  "/promote/schema": {
    post: operations["promoteSchema"];
  };
  "/logout": {
    post: operations["logout"];
  };
  "/execTopicRequests": {
    post: operations["approveTopicRequests"];
  };
  "/execTopicRequestsDecline": {
    post: operations["declineTopicRequests"];
  };
  "/execSchemaRequests": {
    post: operations["execSchemaRequests"];
  };
  "/execSchemaRequestsDecline": {
    post: operations["execSchemaRequestsDecline"];
  };
  "/execNewUserRequestDecline": {
    post: operations["declineNewUserRequests"];
  };
  "/execNewUserRequestApprove": {
    post: operations["approveNewUserRequests"];
  };
  "/execConnectorRequests": {
    post: operations["approveTopicRequests_1"];
  };
  "/execConnectorRequestsDecline": {
    post: operations["declineConnectorRequests"];
  };
  "/execAclRequest": {
    post: operations["approveAclRequests"];
  };
  "/execAclRequestDecline": {
    post: operations["declineAclRequests"];
  };
  "/deleteUserRequest": {
    post: operations["deleteUser"];
  };
  "/deleteTopicRequests": {
    post: operations["deleteTopicRequests"];
  };
  "/deleteTenant": {
    post: operations["deleteTenant"];
  };
  "/deleteTeamRequest": {
    post: operations["deleteTeam"];
  };
  "/deleteSchemaRequests": {
    post: operations["deleteSchemaRequests"];
  };
  "/deleteRole": {
    post: operations["deleteRole"];
  };
  "/deleteEnvironmentRequest": {
    post: operations["deleteEnvironment"];
  };
  "/deleteConnectorRequests": {
    post: operations["deleteConnectorRequests"];
  };
  "/deleteCluster": {
    post: operations["deleteCluster"];
  };
  "/deleteAclRequests": {
    post: operations["deleteAclRequests"];
  };
  "/createTopics": {
    post: operations["createTopicsCreateRequest"];
  };
  "/createTopicDeleteRequest": {
    post: operations["createTopicDeleteRequest"];
  };
  "/createDeleteAclSubscriptionRequest": {
    post: operations["deleteAclSubscriptionRequest"];
  };
  "/createConnector": {
    post: operations["createConnectorRequest"];
  };
  "/createConnectorDeleteRequest": {
    post: operations["createConnectorDeleteRequest"];
  };
  "/createClaimTopicRequest": {
    post: operations["createClaimTopicRequest"];
  };
  "/createClaimConnectorRequest": {
    post: operations["createClaimConnectorRequest"];
  };
  "/createAcl": {
    post: operations["createAcl"];
  };
  "/chPwd": {
    post: operations["changePwd"];
  };
  "/addTenantId": {
    post: operations["addTenantId"];
  };
  "/addRoleId": {
    post: operations["addRoleId"];
  };
  "/addNewUser": {
    post: operations["addNewUser"];
  };
  "/addNewTeam": {
    post: operations["addNewTeam"];
  };
  "/addNewEnv": {
    post: operations["addNewEnv"];
  };
  "/addNewCluster": {
    post: operations["addNewCluster"];
  };
  "/user/{userId}/switchTeamsList": {
    get: operations["getSwitchTeams"];
  };
  "/testClusterApiConnection": {
    get: operations["testClusterApiConnection"];
  };
  "/shutdownContext": {
    get: operations["shutdownApp"];
  };
  "/showUserList": {
    get: operations["showUsers"];
  };
  "/resetMemoryCache/{tenantName}/{entityType}/{operationType}": {
    get: operations["resetMemoryCache"];
  };
  "/resetCache": {
    get: operations["resetCache"];
  };
  "/requests/statistics": {
    /** Get counts of all request entity types for different status,operation types */
    get: operations["getRequestStatistics"];
  };
  "/getUserInfoFromRegistrationId": {
    get: operations["getRegistrationInfoFromId"];
  };
  "/getUserDetails": {
    get: operations["getUserDetails"];
  };
  "/getUpdateEnvStatus": {
    get: operations["getUpdateEnvStatus"];
  };
  "/getTopics": {
    get: operations["getTopics"];
  };
  "/getTopicsRowView": {
    get: operations["getTopicsRowView"];
  };
  "/getTopicsOnly": {
    get: operations["getTopicsOnly"];
  };
  "/getTopicsCountPerEnv": {
    get: operations["getTopicsCountPerEnv"];
  };
  "/getTopicTeam": {
    get: operations["getTopicTeam"];
  };
  "/getTopicRequests": {
    get: operations["getTopicRequests"];
  };
  "/getTopicRequestsForApprover": {
    get: operations["getTopicRequestsForApprover"];
  };
  "/getTopicEvents": {
    get: operations["getTopicEvents"];
  };
  "/getTopicDetailsPerEnv": {
    get: operations["getTopicDetailsPerEnv"];
  };
  "/getTenants": {
    get: operations["getTenants"];
  };
  "/getTenantsInfo": {
    get: operations["getTenantsInfo"];
  };
  "/getTeamsOverview": {
    get: operations["getTeamsOverview"];
  };
  "/getTeamDetails": {
    get: operations["getTeamDetails"];
  };
  "/getSyncTopics": {
    get: operations["getSyncTopics"];
  };
  "/getSyncEnv": {
    get: operations["getSyncEnv"];
  };
  "/getSyncConnectors": {
    get: operations["getSyncTopics_1"];
  };
  "/getSyncConnectorsEnv": {
    get: operations["getSyncConnectorsEnv"];
  };
  "/getSyncBackAcls": {
    get: operations["getSyncBackAcls"];
  };
  "/getSyncAcls": {
    get: operations["getSyncAcls"];
  };
  "/getStandardEnvNames": {
    get: operations["getStandardEnvNames"];
  };
  "/getSchemaRequests": {
    get: operations["getSchemaRequests"];
  };
  "/getSchemaRequestsForApprover": {
    get: operations["getSchemaRequestsForApprover"];
  };
  "/getSchemaRegEnvs": {
    get: operations["getSchemaRegEnvs"];
  };
  "/getSchemaOfTopic": {
    get: operations["getSchemaOfTopic"];
  };
  "/getRoles": {
    get: operations["getRoles"];
  };
  "/getRolesFromDb": {
    get: operations["getRolesFromDb"];
  };
  "/getRequestTypeStatuses": {
    get: operations["getRequestTypeStatuses"];
  };
  "/getPermissions": {
    get: operations["getPermissions"];
  };
  "/getPermissionDescriptions": {
    get: operations["getPermissionDescriptions"];
  };
  "/getNewUserRequests": {
    get: operations["getNewUserRequests"];
  };
  "/getMyTenantInfo": {
    get: operations["getMyTenantInfo"];
  };
  "/getMyProfileInfo": {
    get: operations["getMyProfileInfo"];
  };
  "/getKwReport": {
    get: operations["getKwReport"];
  };
  "/getKwPubkey": {
    get: operations["getKwPubkey"];
  };
  "/getKafkaProtocols": {
    get: operations["getSupportedKafkaProtocols"];
  };
  "/getKafkaConnectEnvs": {
    get: operations["getKafkaConnectEnvs"];
  };
  "/getExtensionPeriods": {
    get: operations["getExtensionPeriods"];
  };
  "/getEnvs": {
    get: operations["getEnvs"];
  };
  "/getEnvsPaginated": {
    get: operations["getEnvsPaginated"];
  };
  "/getEnvsForSchemaRequests": {
    get: operations["getRequestForSchemas"];
  };
  "/getEnvsBaseCluster": {
    get: operations["getEnvsBaseCluster"];
  };
  "/getEnvsBaseClusterFilteredForTeam": {
    get: operations["getEnvsBaseClusterFilteredForTeam"];
  };
  "/getEnvParams": {
    get: operations["getEnvParams"];
  };
  "/getEnvDetails": {
    get: operations["getEnvDetails"];
  };
  "/getDbAuth": {
    get: operations["getDbAuth"];
  };
  "/getDashboardStats": {
    get: operations["getDashboardStats"];
  };
  "/getConsumerOffsets": {
    get: operations["getConsumerOffsets"];
  };
  "/getConnectors": {
    get: operations["getConnectors"];
  };
  "/getConnectorRequests": {
    get: operations["getConnectorRequests"];
  };
  "/getConnectorRequestsForApproval": {
    get: operations["getCreatedConnectorRequests"];
  };
  "/getConnectorOverview": {
    get: operations["getConnectorOverview"];
  };
  "/getConnectorDetails": {
    get: operations["getConnectorDetails"];
  };
  "/getConnectorDetailsPerEnv": {
    get: operations["getConnectorDetailsPerEnv"];
  };
  "/getClusters": {
    get: operations["getClusters"];
  };
  "/getClustersPaginated": {
    get: operations["getClustersPaginated"];
  };
  "/getClusterInfoFromEnv": {
    get: operations["getClusterInfoFromEnv"];
  };
  "/getClusterDetails": {
    get: operations["getClusterDetails"];
  };
  "/getBrokerTopMetrics": {
    get: operations["getBrokerTopMetrics"];
  };
  "/getBasicInfo": {
    get: operations["getBasicInfo"];
  };
  "/getAuth": {
    get: operations["getAuth"];
  };
  "/getAllTeamsSU": {
    get: operations["getAllTeamsSU"];
  };
  "/getAllTeamsSUOnly": {
    get: operations["getAllTeamsSUOnly"];
  };
  "/getAllTeamsSUFromRegisterUsers": {
    get: operations["getAllTeamsSUFromRegisterUsers"];
  };
  "/getAllServerEditableConfig": {
    get: operations["getAllEditableProps"];
  };
  "/getAllServerConfig": {
    get: operations["getAllProperties"];
  };
  "/getAivenServiceAccounts": {
    get: operations["getAivenServiceAccounts"];
  };
  "/getAivenServiceAccount": {
    get: operations["getAivenServiceAccountDetails"];
  };
  "/getAdvancedTopicConfigs": {
    get: operations["getAdvancedTopicConfigs"];
  };
  "/getActivityLogPerEnv": {
    get: operations["showActivityLog"];
  };
  "/getActivityLogForTeamOverview": {
    get: operations["getActivityLogForTeamOverview"];
  };
  "/getActivationInfo": {
    get: operations["getActivationInfo"];
  };
  "/getAcls": {
    get: operations["getAcls"];
  };
  "/getAclsCountPerEnv": {
    get: operations["getAclsCountPerEnv"];
  };
  "/getAclRequests": {
    get: operations["getAclRequests"];
  };
  "/getAclRequestsForApprover": {
    get: operations["getAclRequestsForApprover"];
  };
  "/getAclCommands": {
    get: operations["getAclCommand"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    SchemaRequestModel: {
      /** @enum {string} */
      requestOperationType?: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
      environment: string;
      appname?: string;
      remarks?: string;
      requestor?: string;
      topicname: string;
      schemafull: string;
      schemaversion?: string;
      forceRegister?: boolean;
      /** Format: int32 */
      teamId?: number;
    };
    ApiResponse: {
      /** @enum {string} */
      status?: "100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 EARLY_HINTS" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED";
      /** Format: date-time */
      timestamp?: string;
      message?: string;
      debugMessage?: string;
      result: string;
      data?: Record<string, never>;
    };
    UserInfoModel: {
      username: string;
      userPassword?: string;
      team?: string;
      /** Format: int32 */
      teamId?: number;
      role?: string;
      fullname: string;
      mailid?: string;
      switchTeams?: boolean;
      switchAllowedTeamIds?: (number)[];
      switchAllowedTeamNames?: (string)[];
      tenantName?: string;
      /** Format: int32 */
      tenantId?: number;
      totalNoPages?: string;
      allPageNos?: (string)[];
    };
    TopicConfigEntry: {
      configKey?: string;
      configValue?: string;
    };
    TopicUpdateRequestModel: {
      /** @enum {string} */
      requestOperationType?: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
      environment: string;
      appname?: string;
      remarks?: string;
      requestor?: string;
      topicname: string;
      /** Format: int32 */
      topicpartitions: number;
      replicationfactor: string;
      description: string;
      advancedTopicConfigEntries?: (components["schemas"]["TopicConfigEntry"])[];
      /** Format: int32 */
      teamId?: number;
      approvingTeamId?: string;
      deleteAssociatedSchema?: boolean;
      otherParams?: string;
    };
    TeamModel: {
      teamname: string;
      teammail?: string;
      teamphone: string;
      contactperson: string;
      /** Format: int32 */
      tenantId?: number;
      /** Format: int32 */
      teamId?: number;
      app?: string;
      showDeleteTeam?: boolean;
      tenantName?: string;
      envList?: (string)[];
    };
    SyncTopicUpdates: {
      sequence?: string;
      req_no?: string;
      topicName?: string;
      /** Format: int32 */
      partitions?: number;
      replicationFactor?: string;
      teamSelected?: string;
      envSelected?: string;
    };
    SyncTopicsBulk: {
      topicNames?: (string)[];
      sourceEnv?: string;
      selectedTeam?: string;
      typeOfSync?: string;
      topicDetails?: (Record<string, never>)[];
      topicSearchFilter?: string;
    };
    SyncConnectorUpdates: {
      sequence?: string;
      req_no?: string;
      connectorName?: string;
      teamSelected?: string;
      envSelected?: string;
    };
    SyncBackTopics: {
      topicIds?: (string)[];
      sourceEnv?: string;
      targetEnv?: string;
      typeOfSync?: string;
    };
    SyncBackAcls: {
      aclIds?: (string)[];
      sourceEnv?: string;
      targetEnv?: string;
      typeOfSync?: string;
    };
    SyncAclUpdates: {
      sequence?: string;
      req_no?: string;
      topicName?: string;
      teamSelected?: string;
      consumerGroup?: string;
      aclIp?: string;
      aclSsl?: string;
      aclType?: string;
      envSelected?: string;
    };
    KwRolesPermissionsModel: {
      /** Format: int32 */
      id?: number;
      roleId?: string;
      permission?: string;
      description?: string;
      rolePermission?: string;
      permissionEnabled?: string;
    };
    KwPropertiesModel: {
      kwKey?: string;
      kwValue?: string;
      kwDesc?: string;
    };
    TopicInfo: {
      /** Format: int32 */
      topicid: number;
      sequence: string;
      topicName: string;
      /** Format: int32 */
      noOfPartitions: number;
      description: string;
      noOfReplicas: string;
      teamname: string;
      cluster: string;
      environmentsList: (string)[];
      showEditTopic: boolean;
      showDeleteTopic: boolean;
      topicDeletable: boolean;
      totalNoPages: string;
      currentPage: string;
      allPageNos: (string)[];
      documentation?: string;
      clusterId?: string;
    };
    KafkaConnectorModel: {
      /** Format: int32 */
      sequence?: number;
      /** Format: int32 */
      connectorId?: number;
      connectorName?: string;
      connectorConfig?: string;
      environmentName?: string;
      environmentId?: string;
      teamName?: string;
      possibleTeams?: (string)[];
      allPageNos?: (string)[];
      totalNoPages?: string;
      currentPage?: string;
      remarks?: string;
      documentation?: string;
      environmentsList?: (string)[];
      description?: string;
      showEditConnector?: boolean;
      showDeleteConnector?: boolean;
      connectorDeletable?: boolean;
    };
    RequestVerdict: {
      reason?: string;
      /** @enum {string} */
      requestEntityType: "TOPIC" | "ACL" | "SCHEMA" | "CONNECTOR" | "USER";
      reqIds: (string)[];
    };
    RegisterUserInfoModel: {
      username: string;
      pwd?: string;
      team?: string;
      /** Format: int32 */
      teamId?: number;
      role?: string;
      fullname: string;
      mailid?: string;
      status?: string;
      /** Format: date-time */
      registeredTime?: string;
      approver?: string;
      registrationId?: string;
      /** Format: int32 */
      tenantId?: number;
      tenantName?: string;
    };
    RegisterSaasUserInfoModel: {
      fullname: string;
      mailid?: string;
      recaptchaStr?: string;
      status?: string;
      /** Format: date-time */
      registeredTime?: string;
      approver?: string;
      registrationId?: string;
      tenantName?: string;
    };
    SchemaPromotion: {
      targetEnvironment: string;
      sourceEnvironment: string;
      topicName: string;
      schemaVersion: string;
      schemaFull: string;
      forceRegister?: boolean;
      appName: string;
      remarks: string;
    };
    TopicCreateRequestModel: {
      /** @enum {string} */
      requestOperationType?: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
      environment: string;
      appname?: string;
      remarks?: string;
      requestor?: string;
      topicname: string;
      /** Format: int32 */
      topicpartitions: number;
      replicationfactor: string;
      description: string;
      advancedTopicConfigEntries?: (components["schemas"]["TopicConfigEntry"])[];
      /** Format: int32 */
      teamId?: number;
      approvingTeamId?: string;
      deleteAssociatedSchema?: boolean;
      otherParams?: string;
    };
    KafkaConnectorRequestModel: {
      /** @enum {string} */
      requestOperationType?: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
      environment: string;
      appname?: string;
      remarks?: string;
      requestor?: string;
      connectorName: string;
      connectorConfig: string;
      description: string;
      /** Format: int32 */
      teamId?: number;
      otherParams?: string;
    };
    AclRequestsModel: {
      /** @enum {string} */
      requestOperationType?: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
      environment: string;
      appname?: string;
      remarks?: string;
      requestor?: string;
      topicname: string;
      consumergroup?: string;
      acl_ip?: (string)[];
      acl_ssl?: (string)[];
      aclPatternType: string;
      transactionalId?: string;
      /** Format: int32 */
      teamId: number;
      /** @enum {string} */
      aclType: "PRODUCER" | "CONSUMER";
      /** @enum {string} */
      aclIpPrincipleType: "IP_ADDRESS" | "PRINCIPAL" | "USERNAME";
      /** Format: int32 */
      requestingteam?: number;
      aclResourceType?: string;
      otherParams?: string;
    };
    KwTenantModel: {
      tenantName: string;
      tenantDesc: string;
      /** Format: int32 */
      tenantId?: number;
      licenseExpiryDate?: string;
      contactPerson?: string;
      inTrialPhase?: boolean;
      numberOfDays?: string;
      numberOfHours?: string;
      orgName?: string;
      authorizedToDelete?: boolean;
      emailId?: string;
      activeTenant?: boolean;
    };
    EnvModel: {
      name: string;
      type: string;
      /** Format: int32 */
      clusterId: number;
      topicprefix?: string;
      topicsuffix?: string;
      otherParams?: string;
      id?: string;
      defaultPartitions?: string;
      maxPartitions?: string;
      defaultReplicationFactor?: string;
      maxReplicationFactor?: string;
      associatedEnv?: components["schemas"]["EnvTag"];
      /** Format: int32 */
      tenantId?: number;
    };
    EnvTag: {
      id?: string;
      name?: string;
    };
    KwClustersModel: {
      /** Format: int32 */
      clusterId?: number;
      clusterName: string;
      bootstrapServers: string;
      /** @enum {string} */
      protocol: "PLAINTEXT" | "SSL" | "SASL_PLAIN" | "SASL_SSL_PLAIN_MECHANISM" | "SASL_SSL_GSSAPI_MECHANISM" | "SASL_SSL_SCRAM_MECHANISM_256" | "SASL_SSL_SCRAM_MECHANISM_512";
      clusterType: string;
      kafkaFlavor: string;
      projectName?: string;
      serviceName?: string;
      publicKey?: string;
      showDeleteCluster?: boolean;
      clusterStatus?: string;
      totalNoPages?: string;
      allPageNos?: (string)[];
    };
    TeamModelResponse: {
      teamname: string;
      teamphone: string;
      contactperson: string;
      /** Format: int32 */
      teamId: number;
      /** Format: int32 */
      tenantId: number;
      showDeleteTeam: boolean;
      tenantName: string;
      app?: string;
      teammail?: string;
      envList?: (string)[];
    };
    RequestEntityStatusCount: {
      /** @enum {string} */
      requestEntityType?: "TOPIC" | "ACL" | "SCHEMA" | "CONNECTOR" | "USER";
      requestStatusCountSet?: (components["schemas"]["RequestStatusCount"])[];
      requestsOperationTypeCountSet?: (components["schemas"]["RequestsOperationTypeCount"])[];
    };
    RequestStatusCount: {
      /** @enum {string} */
      requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
      /** Format: int64 */
      count?: number;
    };
    RequestsCountOverview: {
      requestEntityStatistics?: (components["schemas"]["RequestEntityStatusCount"])[];
    };
    RequestsOperationTypeCount: {
      /** @enum {string} */
      requestOperationType?: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
      /** Format: int64 */
      count?: number;
    };
    TopicTeamResponse: {
      team?: string;
      /** Format: int32 */
      teamId?: number;
      error?: string;
      status: boolean;
    };
    TopicRequestsResponseModel: {
      environment: string;
      environmentName: string;
      requestor: string;
      /** Format: int32 */
      teamId: number;
      teamname: string;
      /** @enum {string} */
      requestOperationType: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
      /** @enum {string} */
      requestStatus: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
      /** Format: date-time */
      requesttime: string;
      requesttimestring: string;
      currentPage: string;
      totalNoPages: string;
      allPageNos: (string)[];
      approvingTeamDetails: string;
      approver?: string;
      /** Format: date-time */
      approvingtime?: string;
      remarks?: string;
      appname?: string;
      otherParams?: string;
      topicname: string;
      /** Format: int32 */
      topicpartitions: number;
      replicationfactor: string;
      description: string;
      /** Format: int32 */
      topicid: number;
      deleteAssociatedSchema: boolean;
      advancedTopicConfigEntries: (components["schemas"]["TopicConfigEntry"])[];
      approvingTeamId?: string;
      sequence?: string;
      possibleTeams?: (string)[];
      deletable?: boolean;
      editable?: boolean;
    };
    ChartsJsOverview: {
      data?: (number)[];
      labels?: (string)[];
      colors?: (string)[];
      options?: components["schemas"]["Options"];
      series?: (string)[];
      titleForReport?: string;
      xaxisLabel?: string;
      yaxisLabel?: string;
    };
    Options: {
      title?: components["schemas"]["Title"];
      scales?: components["schemas"]["Scales"];
    };
    Scales: {
      yaxes?: (components["schemas"]["YAx"])[];
      xaxes?: (components["schemas"]["YAx"])[];
    };
    TeamOverview: {
      producerAclsPerTeamsOverview?: components["schemas"]["ChartsJsOverview"];
      consumerAclsPerTeamsOverview?: components["schemas"]["ChartsJsOverview"];
      aclsPerEnvOverview?: components["schemas"]["ChartsJsOverview"];
      topicsPerTeamsOverview?: components["schemas"]["ChartsJsOverview"];
      topicsPerTeamPerEnvOverview?: components["schemas"]["ChartsJsOverview"];
      topicsPerEnvOverview?: components["schemas"]["ChartsJsOverview"];
      partitionsPerEnvOverview?: components["schemas"]["ChartsJsOverview"];
      activityLogOverview?: components["schemas"]["ChartsJsOverview"];
      tenantName?: string;
    };
    Title: {
      display?: boolean;
      text?: string;
      position?: string;
      fontColor?: string;
      fontFamily?: string;
      fontStyle?: string;
    };
    YAx: {
      id?: string;
      type?: string;
      display?: boolean;
      position?: string;
    };
    EnvModelResponse: {
      id: string;
      name: string;
      type: string;
      /** Format: int32 */
      tenantId: number;
      /** Format: int32 */
      clusterId: number;
      tenantName: string;
      clusterName: string;
      envStatus: string;
      otherParams: string;
      showDeleteEnv: boolean;
      totalNoPages: string;
      allPageNos: (string)[];
      associatedEnv?: components["schemas"]["EnvTag"];
      topicprefix?: string;
      topicsuffix?: string;
      defaultPartitions?: string;
      maxPartitions?: string;
      defaultReplicationFactor?: string;
      maxReplicationFactor?: string;
      /** @enum {string} */
      clusterType?: "ALL" | "KAFKA" | "SCHEMA_REGISTRY" | "KAFKA_CONNECT" | "KAFKA_REST_API";
    };
    AclInfo: {
      sequence?: string;
      req_no?: string;
      acl_ip?: string;
      acl_ssl?: string;
      topicname?: string;
      topictype?: string;
      consumergroup?: string;
      environment?: string;
      environmentName?: string;
      teamname?: string;
      /** Format: int32 */
      teamid?: number;
      operation?: string;
      permission?: string;
      transactionalId?: string;
      aclPatternType?: string;
      totalNoPages?: string;
      allPageNos?: (string)[];
      possibleTeams?: (string)[];
      currentPage?: string;
      showDeleteAcl?: boolean;
      /** @enum {string} */
      kafkaFlavorType?: "APACHE_KAFKA" | "AIVEN_FOR_APACHE_KAFKA" | "CONFLUENT" | "CONFLUENT_CLOUD" | "OTHERS";
    };
    SchemaRequestsResponseModel: {
      environment: string;
      environmentName: string;
      requestor: string;
      /** Format: int32 */
      teamId: number;
      teamname: string;
      /** @enum {string} */
      requestOperationType: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
      /** @enum {string} */
      requestStatus: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
      /** Format: date-time */
      requesttime: string;
      requesttimestring: string;
      currentPage: string;
      totalNoPages: string;
      allPageNos: (string)[];
      approvingTeamDetails: string;
      approver?: string;
      /** Format: date-time */
      approvingtime?: string;
      remarks?: string;
      appname?: string;
      otherParams?: string;
      topicname: string;
      schemafull: string;
      /** Format: int32 */
      req_no: number;
      forceRegister: boolean;
      schemaversion?: string;
      deletable?: boolean;
      editable?: boolean;
    };
    SchemaOverview: {
      topicExists?: boolean;
      schemaExists?: boolean;
      prefixAclsExists?: boolean;
      txnAclsExists?: boolean;
      allSchemaVersions?: {
        [key: string]: (number)[] | undefined;
      };
      latestVersion?: {
        [key: string]: number | undefined;
      };
      schemaPromotionDetails?: {
        [key: string]: ({
          [key: string]: string | undefined;
        }) | undefined;
      };
      schemaDetails?: ({
          [key: string]: string | undefined;
        })[];
    };
    KafkaConnectorRequestsResponseModel: {
      environment: string;
      environmentName: string;
      requestor: string;
      /** Format: int32 */
      teamId: number;
      teamname: string;
      /** @enum {string} */
      requestOperationType: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
      /** @enum {string} */
      requestStatus: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
      /** Format: date-time */
      requesttime: string;
      requesttimestring: string;
      currentPage: string;
      totalNoPages: string;
      allPageNos: (string)[];
      approvingTeamDetails: string;
      approver?: string;
      /** Format: date-time */
      approvingtime?: string;
      remarks?: string;
      appname?: string;
      otherParams?: string;
      connectorName: string;
      description: string;
      connectorConfig: string;
      /** Format: int32 */
      connectorId: number;
      possibleTeams?: (string)[];
      approvingTeamId?: string;
      deletable?: boolean;
      editable?: boolean;
    };
    ConnectorOverview: {
      topicInfoList?: (components["schemas"]["KafkaConnectorModel"])[];
      topicHistoryList?: (components["schemas"]["TopicHistory"])[];
      promotionDetails?: {
        [key: string]: string | undefined;
      };
      connectorExists?: boolean;
      topicDocumentation?: string;
      /** Format: int32 */
      topicIdForDocumentation?: number;
    };
    TopicHistory: {
      environmentName?: string;
      teamName?: string;
      requestedBy?: string;
      requestedTime?: string;
      approvedBy?: string;
      approvedTime?: string;
      remarks?: string;
    };
    ClusterInfo: {
      aivenCluster: boolean;
    };
    JmxOverview: {
      brokerTopMetricsOverview?: components["schemas"]["ChartsJsOverview"];
    };
    AuthenticationInfo: {
      contextPath: string;
      teamsize: string;
      schema_clusters_count: string;
      kafka_clusters_count: string;
      kafkaconnect_clusters_count: string;
      canSwitchTeams: string;
      broadcastText: string;
      saasEnabled: string;
      tenantActiveStatus: string;
      username: string;
      authenticationType: string;
      teamname: string;
      teamId: string;
      tenantName: string;
      userrole: string;
      companyinfo: string;
      klawversion: string;
      notifications: string;
      notificationsAcls: string;
      notificationsSchemas: string;
      notificationsUsers: string;
      notificationsConnectors: string;
      canShutdownKw: string;
      canUpdatePermissions: string;
      addEditRoles: string;
      viewTopics: string;
      requestItems: string;
      viewKafkaConnect: string;
      syncBackTopics: string;
      syncBackAcls: string;
      updateServerConfig: string;
      showServerConfigEnvProperties: string;
      addUser: string;
      addTeams: string;
      syncTopicsAcls: string;
      syncConnectors: string;
      approveAtleastOneRequest: string;
      approveDeclineTopics: string;
      approveDeclineSubscriptions: string;
      approveDeclineSchemas: string;
      approveDeclineConnectors: string;
      pendingApprovalsRedirectionPage: string;
      showAddDeleteTenants: string;
      addDeleteEditClusters: string;
      addDeleteEditEnvs: string;
      coralEnabled: string;
      adAuthRoleEnabled: string;
      supportlink: string;
      myteamtopics: string;
    };
    ServerConfigProperties: {
      id?: string;
      key?: string;
      value?: string;
    };
    ActivityLog: {
      /** Format: int32 */
      req_no?: number;
      /** Format: int32 */
      tenantId?: number;
      activityName?: string;
      activityType?: string;
      /** Format: date-time */
      activityTime?: string;
      activityTimeString?: string;
      details?: string;
      user?: string;
      /** Format: int32 */
      teamId?: number;
      env?: string;
      envName?: string;
      team?: string;
      totalNoPages?: string;
      currentPage?: string;
      allPageNos?: (string)[];
    };
    TopicOverview: {
      topicExists?: boolean;
      schemaExists?: boolean;
      prefixAclsExists?: boolean;
      txnAclsExists?: boolean;
      topicInfoList?: (components["schemas"]["TopicInfo"])[];
      aclInfoList?: (components["schemas"]["AclInfo"])[];
      prefixedAclInfoList?: (components["schemas"]["AclInfo"])[];
      transactionalAclInfoList?: (components["schemas"]["AclInfo"])[];
      topicHistoryList?: (components["schemas"]["TopicHistory"])[];
      topicPromotionDetails?: {
        [key: string]: string | undefined;
      };
      topicDocumentation?: string;
      /** Format: int32 */
      topicIdForDocumentation?: number;
    };
    AclRequestsResponseModel: {
      environment: string;
      environmentName: string;
      requestor: string;
      /** Format: int32 */
      teamId: number;
      teamname: string;
      /** @enum {string} */
      requestOperationType: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
      /** @enum {string} */
      requestStatus: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
      /** Format: date-time */
      requesttime: string;
      requesttimestring: string;
      currentPage: string;
      totalNoPages: string;
      allPageNos: (string)[];
      approvingTeamDetails: string;
      approver?: string;
      /** Format: date-time */
      approvingtime?: string;
      remarks?: string;
      appname?: string;
      otherParams?: string;
      topicname: string;
      aclPatternType: string;
      /** @enum {string} */
      aclType: "PRODUCER" | "CONSUMER";
      /** @enum {string} */
      aclIpPrincipleType: "IP_ADDRESS" | "PRINCIPAL" | "USERNAME";
      /** Format: int32 */
      req_no: number;
      /** Format: int32 */
      requestingteam: number;
      requestingTeamName: string;
      consumergroup: string;
      acl_ip: (string)[];
      acl_ssl: (string)[];
      transactionalId?: string;
      aclResourceType?: string;
      deletable?: boolean;
      editable?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type external = Record<string, never>;

export type operations = {

  validateSchema: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemaRequestModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updateUserTeamFromSwitchTeams: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInfoModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  uploadSchema: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemaRequestModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updateUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInfoModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createTopicsUpdateRequest: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TopicUpdateRequestModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updateTeam: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updateSyncTopics: {
    requestBody: {
      content: {
        "application/json": (components["schemas"]["SyncTopicUpdates"])[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updateSyncTopicsBulk: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SyncTopicsBulk"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updateSyncConnectors: {
    requestBody: {
      content: {
        "application/json": (components["schemas"]["SyncConnectorUpdates"])[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updateSyncBackTopics: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SyncBackTopics"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updateSyncBackAcls: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SyncBackAcls"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updateSyncAcls: {
    requestBody: {
      content: {
        "application/json": (components["schemas"]["SyncAclUpdates"])[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updateProfile: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInfoModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updatePermissions: {
    requestBody: {
      content: {
        "application/json": (components["schemas"]["KwRolesPermissionsModel"])[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  updateKwCustomProperty: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["KwPropertiesModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  udpateTenant: {
    parameters: {
      query: {
        orgName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  udpateTenantExtension: {
    parameters: {
      query: {
        selectedTenantExtensionPeriod: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  sendMessageToAdmin: {
    parameters: {
      query: {
        contactFormSubject: string;
        contactFormMessage: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  saveTopicDocumentation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TopicInfo"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  saveConnectorDocumentation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["KafkaConnectorModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  resetPassword: {
    parameters: {
      query: {
        username: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  /**
   * Delete a Request 
   * @description Updates the Status of a request to Deleted
   */
  deleteRequest: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestVerdict"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
      /** @description Multi Status */
      207: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
      /** @description Bad Request */
      405: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
    };
  };
  /**
   * Decline a Request 
   * @description Updates the Status of a request to Declined
   */
  declineRequest: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestVerdict"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
      /** @description Multi Status */
      207: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
      /** @description Bad Request */
      405: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
    };
  };
  /**
   * Approve a Request 
   * @description Updates the Status of a request to Approved and provisions the request
   */
  approveRequest: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestVerdict"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
      /** @description Multi Status */
      207: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
      /** @description Bad Request */
      405: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": (components["schemas"]["ApiResponse"])[];
        };
      };
    };
  };
  registerUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterUserInfoModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  registerUserSaas: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterSaasUserInfoModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  promoteSchema: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemaPromotion"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  logout: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  approveTopicRequests: {
    parameters: {
      query: {
        topicId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  declineTopicRequests: {
    parameters: {
      query: {
        topicId: string;
        reasonForDecline: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  execSchemaRequests: {
    parameters: {
      query: {
        avroSchemaReqId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  execSchemaRequestsDecline: {
    parameters: {
      query: {
        avroSchemaReqId: string;
        reasonForDecline: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  declineNewUserRequests: {
    parameters: {
      query: {
        username: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  approveNewUserRequests: {
    parameters: {
      query: {
        username: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  approveTopicRequests_1: {
    parameters: {
      query: {
        connectorId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  declineConnectorRequests: {
    parameters: {
      query: {
        connectorId: string;
        reasonForDecline: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  approveAclRequests: {
    parameters: {
      query: {
        req_no: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  declineAclRequests: {
    parameters: {
      query: {
        req_no: string;
        reasonForDecline: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteUser: {
    parameters: {
      query: {
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteTopicRequests: {
    parameters: {
      query: {
        topicId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteTenant: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteTeam: {
    parameters: {
      query: {
        teamId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteSchemaRequests: {
    parameters: {
      query: {
        req_no: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteRole: {
    parameters: {
      query: {
        roleId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteEnvironment: {
    parameters: {
      query: {
        envId: string;
        envType: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteConnectorRequests: {
    parameters: {
      query: {
        connectorId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteCluster: {
    parameters: {
      query: {
        clusterId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteAclRequests: {
    parameters: {
      query: {
        req_no: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createTopicsCreateRequest: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TopicCreateRequestModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createTopicDeleteRequest: {
    parameters: {
      query: {
        topicName: string;
        env: string;
        deleteAssociatedSchema?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  deleteAclSubscriptionRequest: {
    parameters: {
      query: {
        req_no: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createConnectorRequest: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["KafkaConnectorRequestModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createConnectorDeleteRequest: {
    parameters: {
      query: {
        connectorName: string;
        env: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createClaimTopicRequest: {
    parameters: {
      query: {
        topicName: string;
        env: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createClaimConnectorRequest: {
    parameters: {
      query: {
        connectorName: string;
        env: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  createAcl: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AclRequestsModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  changePwd: {
    parameters: {
      query: {
        changePwd: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  addTenantId: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["KwTenantModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  addRoleId: {
    parameters: {
      query: {
        roleId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  addNewUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInfoModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  addNewTeam: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  addNewEnv: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EnvModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  addNewCluster: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["KwClustersModel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  getSwitchTeams: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["TeamModelResponse"])[];
        };
      };
    };
  };
  testClusterApiConnection: {
    parameters: {
      query: {
        clusterApiUrl: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  shutdownApp: {
    responses: {
      /** @description OK */
      200: never;
    };
  };
  showUsers: {
    parameters: {
      query: {
        teamName?: string;
        pageNo?: string;
        searchUserParam?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["UserInfoModel"])[];
        };
      };
    };
  };
  resetMemoryCache: {
    parameters: {
      path: {
        tenantName: string;
        entityType: string;
        operationType: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  resetCache: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  /** Get counts of all request entity types for different status,operation types */
  getRequestStatistics: {
    parameters: {
      query: {
        requestMode: "TO_APPROVE" | "MY_APPROVALS" | "MY_REQUESTS";
      };
    };
    responses: {
      /** @description default response */
      default: {
        content: {
          "application/json": components["schemas"]["RequestsCountOverview"];
        };
      };
    };
  };
  getRegistrationInfoFromId: {
    parameters: {
      query: {
        userRegistrationId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RegisterUserInfoModel"];
        };
      };
    };
  };
  getUserDetails: {
    parameters: {
      query: {
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserInfoModel"];
        };
      };
    };
  };
  getUpdateEnvStatus: {
    parameters: {
      query: {
        envId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  getTopics: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        topicnamesearch?: string;
        teamName?: string;
        topicType?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": ((components["schemas"]["TopicInfo"])[])[];
        };
      };
    };
  };
  getTopicsRowView: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        topicnamesearch?: string;
        teamName?: string;
        topicType?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["TopicInfo"])[];
        };
      };
    };
  };
  getTopicsOnly: {
    parameters: {
      query: {
        isMyTeamTopics?: string;
        envSelected?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
    };
  };
  getTopicsCountPerEnv: {
    parameters: {
      query: {
        sourceEnvSelected: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  getTopicTeam: {
    parameters: {
      query: {
        topicName: string;
        patternType?: "PREFIXED" | "LITERAL";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TopicTeamResponse"];
        };
      };
    };
  };
  getTopicRequests: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        env?: string;
        operationType?: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
        search?: string;
        isMyRequest?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["TopicRequestsResponseModel"])[];
        };
      };
    };
  };
  getTopicRequestsForApprover: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        teamId?: number;
        env?: string;
        search?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["TopicRequestsResponseModel"])[];
        };
      };
    };
  };
  getTopicEvents: {
    parameters: {
      query: {
        envId: string;
        topicName: string;
        consumerGroupId: string;
        offsetId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  getTopicDetailsPerEnv: {
    parameters: {
      query: {
        envSelected: string;
        topicname: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown | undefined;
          };
        };
      };
    };
  };
  getTenants: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["KwTenantModel"])[];
        };
      };
    };
  };
  getTenantsInfo: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: number | undefined;
          };
        };
      };
    };
  };
  getTeamsOverview: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["TeamOverview"])[];
        };
      };
    };
  };
  getTeamDetails: {
    parameters: {
      query: {
        teamId: number;
        tenantName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamModelResponse"];
        };
      };
    };
  };
  getSyncTopics: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        topicnamesearch?: string;
        showAllTopics?: string;
        isBulkOption?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown | undefined;
          };
        };
      };
    };
  };
  getSyncEnv: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": ({
              [key: string]: string | undefined;
            })[];
        };
      };
    };
  };
  getSyncTopics_1: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        connectornamesearch?: string;
        isBulkOption?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["KafkaConnectorModel"])[];
        };
      };
    };
  };
  getSyncConnectorsEnv: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["EnvModelResponse"])[];
        };
      };
    };
  };
  getSyncBackAcls: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        topicnamesearch?: string;
        teamName?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["AclInfo"])[];
        };
      };
    };
  };
  getSyncAcls: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        topicnamesearch?: string;
        showAllAcls?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["AclInfo"])[];
        };
      };
    };
  };
  getStandardEnvNames: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
    };
  };
  getSchemaRequests: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        topic?: string;
        operationType?: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
        env?: string;
        search?: string;
        isMyRequest?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["SchemaRequestsResponseModel"])[];
        };
      };
    };
  };
  getSchemaRequestsForApprover: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        topic?: string;
        env?: string;
        search?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["SchemaRequestsResponseModel"])[];
        };
      };
    };
  };
  getSchemaRegEnvs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["EnvModelResponse"])[];
        };
      };
    };
  };
  getSchemaOfTopic: {
    parameters: {
      query: {
        topicnamesearch: string;
        schemaVersionSearch?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SchemaOverview"];
        };
      };
    };
  };
  getRoles: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
    };
  };
  getRolesFromDb: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
    };
  };
  getRequestTypeStatuses: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
    };
  };
  getPermissions: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: (({
                [key: string]: boolean | undefined;
              })[]) | undefined;
          };
        };
      };
    };
  };
  getPermissionDescriptions: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  getNewUserRequests: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["RegisterUserInfoModel"])[];
        };
      };
    };
  };
  getMyTenantInfo: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["KwTenantModel"];
        };
      };
    };
  };
  getMyProfileInfo: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserInfoModel"];
        };
      };
    };
  };
  getKwReport: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  getKwPubkey: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  getSupportedKafkaProtocols: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": ({
              [key: string]: string | undefined;
            })[];
        };
      };
    };
  };
  getKafkaConnectEnvs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["EnvModelResponse"])[];
        };
      };
    };
  };
  getExtensionPeriods: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
    };
  };
  getEnvs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["EnvModelResponse"])[];
        };
      };
    };
  };
  getEnvsPaginated: {
    parameters: {
      query: {
        pageNo: string;
        envId?: string;
        searchEnvParam?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["EnvModelResponse"])[];
        };
      };
    };
  };
  getRequestForSchemas: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["EnvModelResponse"])[];
        };
      };
    };
  };
  getEnvsBaseCluster: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["EnvModelResponse"])[];
        };
      };
    };
  };
  getEnvsBaseClusterFilteredForTeam: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["EnvModelResponse"])[];
        };
      };
    };
  };
  getEnvParams: {
    parameters: {
      query: {
        envSelected: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: (string)[] | undefined;
          };
        };
      };
    };
  };
  getEnvDetails: {
    parameters: {
      query: {
        envSelected: string;
        envType: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EnvModelResponse"];
        };
      };
    };
  };
  getDbAuth: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  getDashboardStats: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  getConsumerOffsets: {
    parameters: {
      query: {
        env: string;
        topicName: string;
        consumerGroupId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": ({
              [key: string]: string | undefined;
            })[];
        };
      };
    };
  };
  getConnectors: {
    parameters: {
      query: {
        env: string;
        pageNo: string;
        currentPage?: string;
        connectornamesearch?: string;
        teamName?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": ((components["schemas"]["KafkaConnectorModel"])[])[];
        };
      };
    };
  };
  getConnectorRequests: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        operationType?: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
        env?: string;
        search?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["KafkaConnectorRequestsResponseModel"])[];
        };
      };
    };
  };
  getCreatedConnectorRequests: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        env?: string;
        search?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["KafkaConnectorRequestsResponseModel"])[];
        };
      };
    };
  };
  getConnectorOverview: {
    parameters: {
      query: {
        connectornamesearch: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ConnectorOverview"];
        };
      };
    };
  };
  getConnectorDetails: {
    parameters: {
      query: {
        env: string;
        connectorName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  getConnectorDetailsPerEnv: {
    parameters: {
      query: {
        envSelected: string;
        connectorName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown | undefined;
          };
        };
      };
    };
  };
  getClusters: {
    parameters: {
      query: {
        clusterType: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["KwClustersModel"])[];
        };
      };
    };
  };
  getClustersPaginated: {
    parameters: {
      query: {
        clusterType: string;
        pageNo: string;
        clusterId?: string;
        searchClusterParam?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["KwClustersModel"])[];
        };
      };
    };
  };
  getClusterInfoFromEnv: {
    parameters: {
      query: {
        envSelected: string;
        envType: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ClusterInfo"];
        };
      };
    };
  };
  getClusterDetails: {
    parameters: {
      query: {
        clusterId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["KwClustersModel"];
        };
      };
    };
  };
  getBrokerTopMetrics: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["JmxOverview"];
        };
      };
    };
  };
  getBasicInfo: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown | undefined;
          };
        };
      };
    };
  };
  getAuth: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthenticationInfo"];
        };
      };
    };
  };
  getAllTeamsSU: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["TeamModelResponse"])[];
        };
      };
    };
  };
  getAllTeamsSUOnly: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
    };
  };
  getAllTeamsSUFromRegisterUsers: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["TeamModelResponse"])[];
        };
      };
    };
  };
  getAllEditableProps: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": ({
              [key: string]: string | undefined;
            })[];
        };
      };
    };
  };
  getAllProperties: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["ServerConfigProperties"])[];
        };
      };
    };
  };
  getAivenServiceAccounts: {
    parameters: {
      query: {
        env: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  getAivenServiceAccountDetails: {
    parameters: {
      query: {
        env: string;
        topicName: string;
        userName: string;
        aclReqNo: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
    };
  };
  getAdvancedTopicConfigs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  showActivityLog: {
    parameters: {
      query: {
        env?: string;
        pageNo: string;
        currentPage?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["ActivityLog"])[];
        };
      };
    };
  };
  getActivityLogForTeamOverview: {
    parameters: {
      query: {
        activityLogForTeam: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamOverview"];
        };
      };
    };
  };
  getActivationInfo: {
    parameters: {
      query: {
        userActivationId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  getAcls: {
    parameters: {
      query: {
        topicnamesearch: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TopicOverview"];
        };
      };
    };
  };
  getAclsCountPerEnv: {
    parameters: {
      query: {
        sourceEnvSelected: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
  getAclRequests: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        operationType?: "CREATE" | "UPDATE" | "PROMOTE" | "CLAIM" | "DELETE";
        topic?: string;
        env?: string;
        search?: string;
        aclType?: "PRODUCER" | "CONSUMER";
        isMyRequest?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["AclRequestsResponseModel"])[];
        };
      };
    };
  };
  getAclRequestsForApprover: {
    parameters: {
      query: {
        pageNo: string;
        currentPage?: string;
        requestStatus?: "CREATED" | "DELETED" | "DECLINED" | "APPROVED" | "ALL";
        topic?: string;
        env?: string;
        aclType?: "PRODUCER" | "CONSUMER";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["AclRequestsResponseModel"])[];
        };
      };
    };
  };
  getAclCommand: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
    };
  };
};
